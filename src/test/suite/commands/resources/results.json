[
    {
        "resource_types": [
            "all"
        ],
        "is_custom": false,
        "security_layer": "tagging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Some organizations require that all resources have at least one tag set. This rule will review the resources that can be tagged, and make sure each one has a tag that is not the Name tag. Resources that are not tagged will be flagged.",
        "issue_items": [
            {
                "violating_entity": {
                    "cloud_resource_url": null,
                    "created_at": "2021-11-04T14:04:13.263011",
                    "friendly_name": "aws_vpc.east2",
                    "iac_resource_url": "https://github.com/indeni/cloudrail-knowledge/tree/main/y/main.tf#L9",
                    "name": "module2",
                    "id": "d1666213-35e8-480c-b8a9-8da1f7617ea7",
                    "is_pseudo": false,
                    "iac_entity_id": "aws_vpc.east2",
                    "iac_resource_metadata": {
                        "start_line": 9,
                        "module_metadata": null,
                        "end_line": 14,
                        "id": "9786b711-ade3-42c8-be2a-39e2c37eec41",
                        "iac_entity_id": "aws_vpc.east2",
                        "file_name": "main.tf"
                    },
                    "type": "VPC",
                    "cloud_entity_id": null,
                    "managed_by_iac": true
                },
                "exposed_entity": {
                    "cloud_resource_url": null,
                    "created_at": "2021-11-04T14:04:13.263011",
                    "friendly_name": "aws_vpc.east2",
                    "iac_resource_url": "https://github.com/indeni/cloudrail-knowledge/tree/main/y/main.tf#L9",
                    "name": "module2",
                    "id": "d1666213-35e8-480c-b8a9-8da1f7617ea7",
                    "is_pseudo": false,
                    "iac_entity_id": "aws_vpc.east2",
                    "iac_resource_metadata": {
                        "start_line": 9,
                        "module_metadata": null,
                        "end_line": 14,
                        "id": "9786b711-ade3-42c8-be2a-39e2c37eec41",
                        "iac_entity_id": "aws_vpc.east2",
                        "file_name": "main.tf"
                    },
                    "type": "VPC",
                    "cloud_entity_id": null,
                    "managed_by_iac": true
                },
                "evidence": "Resource VPC `aws_vpc.east2` does not have any tags set other than \"Name\""
            },
            {
                "violating_entity": {
                    "cloud_resource_url": null,
                    "created_at": "2021-11-04T14:04:13.263053",
                    "friendly_name": "module.vpc_module.aws_vpc.east",
                    "iac_resource_url": "https://github.com/indeni/cloudrail-knowledge/tree/main/y/modules/vpc_module/main.tf#L16",
                    "name": "module",
                    "id": "8d063aa8-8885-4c50-954d-25176583dcad",
                    "is_pseudo": false,
                    "iac_entity_id": "module.vpc_module.aws_vpc.east",
                    "iac_resource_metadata": {
                        "start_line": 16,
                        "module_metadata": {
                            "iac_entity_id": "module.vpc_module",
                            "file_name": "main.tf",
                            "start_line": 1,
                            "end_line": 3,
                            "module_metadata": null,
                            "id": "75de72b2-aeab-42eb-9c76-89f102e8b4b7"
                        },
                        "end_line": 21,
                        "id": "8b03b8db-2a68-481c-8be7-eb5affdfeeb4",
                        "iac_entity_id": "module.vpc_module.aws_vpc.east",
                        "file_name": "modules/vpc_module/main.tf"
                    },
                    "type": "VPC",
                    "cloud_entity_id": null,
                    "managed_by_iac": true
                },
                "exposed_entity": {
                    "cloud_resource_url": null,
                    "created_at": "2021-11-04T14:04:13.263053",
                    "friendly_name": "module.vpc_module.aws_vpc.east",
                    "iac_resource_url": "https://github.com/indeni/cloudrail-knowledge/tree/main/y/modules/vpc_module/main.tf#L16",
                    "name": "module",
                    "id": "8d063aa8-8885-4c50-954d-25176583dcad",
                    "is_pseudo": false,
                    "iac_entity_id": "module.vpc_module.aws_vpc.east",
                    "iac_resource_metadata": {
                        "start_line": 16,
                        "module_metadata": {
                            "iac_entity_id": "module.vpc_module",
                            "file_name": "main.tf",
                            "start_line": 1,
                            "end_line": 3,
                            "module_metadata": null,
                            "id": "75de72b2-aeab-42eb-9c76-89f102e8b4b7"
                        },
                        "end_line": 21,
                        "id": "8b03b8db-2a68-481c-8be7-eb5affdfeeb4",
                        "iac_entity_id": "module.vpc_module.aws_vpc.east",
                        "file_name": "modules/vpc_module/main.tf"
                    },
                    "type": "VPC",
                    "cloud_entity_id": null,
                    "managed_by_iac": true
                },
                "evidence": "Resource VPC `module.vpc_module.aws_vpc.east` does not have any tags set other than \"Name\""
            }
        ],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e649111d-6170-46f2-a3a8-62bc1bac1c6b",
        "rule_logic": "Cloudrail will iterate over all resources in the cloud account and Terraform code, and for those that support tags, will check to see if they have any tags set other than the Name tag.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Add a tags section to the resource with at least one tag beyond the Name tag.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_all_resources_tagged_rule.py",
        "rule_name": "Ensure all resources that can be tagged have at least one tag",
        "compliance": {},
        "status": "failed",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Access the specific resource in the AWS console and add tags.",
        "policy_id": null,
        "rule_id": "non_car_all_resources_tagged",
        "severity": "low"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Using default security groups in general is inadvisable. By locking security groups down, you are validating that if anyone uses them by accident, they will realize before any security issues occur.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "2ebbef29-55c6-4710-8d15-0212a3781902",
        "rule_logic": "Cloudrail will review all of the default security groups configured in your environment. It will then cross reference these security groups with the resources they are used with, to determine they are used at all. For each of those default security groups that are used, Cloudrail will determine if they allow any ingress or egress traffic. By doing this context-based analysis, Cloudrail ensures that only default security groups who pose a true security risk are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_default_security_group, update the inline ingress and egress rules.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/ensure_all_used_default_security_groups_restrict_all_traffic_rule.py",
        "rule_name": "Ensure all used default security groups of every VPC restrict all traffic",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3"
                ]
            }
        },
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#deleting-security-group-rule> to update the security group rules.",
        "policy_id": null,
        "rule_id": "ensure_all_used_default_security_groups_restrict_all_traffic_rule",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid the need of sending data destined to S3 through the internet.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "37e316f0-50b7-4dc0-83a1-28192555214d",
        "rule_logic": "Cloudrail will identify all buckets and the regions where they exist. For each region, it will check that there is a VPC Endpoint for S3 created and which VPC it's associated to, it will then check all VPCs to identify which ones are not associated to a VPC Endpoint for S3 and will flag it as non-compliant, also if there were no VPC Endpoints in the region but there was a bucket it will flag all VPCs as non-compliant. It will check that there is at least one resource using an ENI to avoid alerting on unused VPCs.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Create the aws_vpc_endpoint resource for the corresponding VPC to associate the S3 endpoint. Create the aws_vpc_endpoint_route_table_association resource in order to populate the route table with routes to the S3 service.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_endpoints/vpc_endpoint_gateway_not_used_rule.py",
        "rule_name": "Ensure VPC Endpoint for S3 is enabled in all VPCs",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.3"
                ]
            }
        },
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-s3.html> to configure S3 endpoint for the VPC.",
        "policy_id": null,
        "rule_id": "vpc_endpoint_s3_exposure",
        "severity": "major"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid the need of sending data destined to DynamoDB through the internet.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "69d75041-1b1f-4832-8ad4-a3e147483df2",
        "rule_logic": "Cloudrail will identify all tables and the regions where they exist. For each region, it will check that there is a VPC Endpoint for DynamoDB created and which VPC it's associated to, it will then check all VPCs to identify which ones are not associated to a VPC Endpoint for DynamoDB and will flag it as non-compliant, also if there were no VPC Endpoints in the region but there was a table it will flag all VPCs as non-compliant. It will check that there is at least one resource using an ENI to avoid alerting on unused VPCs.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Create the aws_vpc_endpoint resource for the corresponding VPC to associate the DynamoDB endpoint. Create the aws_vpc_endpoint_route_table_association resource in order to populate the route table with routes to the DynamoDB service.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_endpoints/vpc_endpoint_gateway_not_used_rule.py",
        "rule_name": "Ensure VPC Endpoint for DynamoDB is enabled in all VPCs",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.3"
                ]
            }
        },
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-s3.html> to configure DynamoDB endpoint for the VPC.",
        "policy_id": null,
        "rule_id": "vpc_endpoint_dynamodb_exposure",
        "severity": "major"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your security groups. If a security group is using a default description, or has a rule which does not include a description, this rule will trigger.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e70638f7-2e69-4a13-8bcc-72d170da40d2",
        "rule_logic": "Cloudrail will review all security groups within your AWS account. If we find a security group we will check to see if it has a non-default description (for example, \u201cManaged by Terraform\u201d is considered default). If there\u2019s a default description, this rule will trigger. In addition, Cloudrail will check that each inbound rule contains a description, if there is no description this rule will trigger. We will also check all outbound rules. If we find an outbound rule that does not have a target CIDR of \u20180.0.0.0/0\u2019 (default), we will check to see if there is no description set. If there is no description, this rule will trigger.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_security_group and aws_security_group_rule resources, set description argument with a proper value. Note, this will force the re-creation of the security group and all resources that depend on it. This is an AWS limitation.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_security_group_include_description_rule.py",
        "rule_name": "Ensure all security groups and rules have a description detailing the rule",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.1"
                ]
            }
        },
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html> to update the security group or security group rules description field.",
        "policy_id": null,
        "rule_id": "non_car_aws_ec2_security_group_rule_no_desc",
        "severity": "low"
    },
    {
        "resource_types": [
            "service_endpoint",
            "queuing"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid sending data destined to SQS through the internet. Cloudrail will identify misconfigurations by checking if VPC Endpoint Interfaces are in use or not, by reviewing that an endpoint exists in the VPC. VPC Interface Endpoints might not be available in all regions, so the rule checks that if the service is running it's configured in all possible VPCs. This rule has potential false positives given that not all VPCs require communication with SQS.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "403bfaa3-28c4-4411-8752-85bf7f6aa723",
        "rule_logic": "For each region, Cloudrail will verify if at least one SQS queue exists, then will also verify that the service VPC Endpoint for SQS is available in the region, if so it will check that it's configured in all possible VPCs and will flag any non-compliant VPC.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Create a resource aws_vpc_endpoint for SQS interface, and associate it to the VPC.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_endpoints/abstract_vpc_endpoint_interface_not_used_rule.py",
        "rule_name": "Ensure VPC Endpoint for SQS is enabled in all VPCs in use",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.3"
                ]
            }
        },
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Create a VPC Endpoint for SQS, follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html#create-interface-endpoint>.",
        "policy_id": null,
        "rule_id": "vpc_endpoint_sqs_exposure",
        "severity": "medium"
    },
    {
        "resource_types": [
            "service_endpoint",
            "queuing"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid sending data destined to SQS through the internet. Cloudrail will identify misconfigurations by checking if VPC Endpoint Interfaces are in use or not, by reviewing that an endpoint exists in the VPC. VPC Interface Endpoints are not available in all availability zones, also they can be configured in just one subnet per availability zone, so the rule checks that if the service is running it's configured in at least two availability zones in use and leaves the traffic architecture decision to the customer. Additionally, make sure that if the application is using the custom hostnames for the service, and if it's using default hostnames (I.e. sqs.us-east-2.amazonaws.com) that the application is using Amazon DNS and not an internal DNS.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e796dbc5-1589-4bd0-afe6-18748f5fee29",
        "rule_logic": "For each region, Cloudrail will verify if at least one SQS queue exists, then will also verify that the service VPC Endpoint for SQS is available in the region and in which availability zones. It will also check all subnets in use, and check all subnets that may have an endpoint configured. It will then check to see that at least two of the availability zones in use have an interface endpoint in them.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Locate resource aws_vpc_endpoint for SQS interface, and make sure that argument subnet_ids contains at least one subnet in each Availability Zone in use. Interface endpoints do have their costs, so if that\u2019s an issue, consider using at least two interface endpoints in different availability zones, and not just one.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_endpoints/abstract_vpc_endpoint_interface_availability_zone_rule.py",
        "rule_name": "Ensure VPC Endpoint for SQS is enabled in all Availability Zones in use a VPC",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "For each VPC that is currently using VPC endpoints for SQS, make sure it\u2019s enabled in one subnet for each Availability Zone in use. Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html#create-interface-endpoint>. Interface endpoints do have their costs, so if that\u2019s an issue, consider using at least two interface endpoints in different availability zones, and not just one.",
        "policy_id": null,
        "rule_id": "vpc_endpoint_sqs_subnet_exposure",
        "severity": "medium"
    },
    {
        "resource_types": [
            "service_endpoint",
            "queuing"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid sending data destined to EC2 through the internet. Cloudrail will identify misconfigurations by checking if VPC Endpoint Interfaces are in use or not, by reviewing that an endpoint exists in the VPC. VPC Interface Endpoints might not be available in all regions, so the rule checks that if the service is running it's configured in all possible VPCs. This rule has potential false positives given that not all VPCs require communication with EC2.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "1e240d4e-19dc-4bc3-8c7e-e2db19b41600",
        "rule_logic": "For each region, Cloudrail will verify if at least one EC2 instance exists, then will also verify that the service VPC Endpoint for EC2 is available in the region, if so it will check that it's configured in all possible VPCs and will flag any non-compliant VPC.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Create a resource aws_vpc_endpoint for EC2 interface, and associate it to the VPC.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_endpoints/abstract_vpc_endpoint_interface_not_used_rule.py",
        "rule_name": "Ensure VPC Endpoint for EC2 is enabled in all VPCs in use",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Create a VPC Endpoint for EC2, follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html#create-interface-endpoint>.",
        "policy_id": null,
        "rule_id": "vpc_endpoint_ec2_exposure",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Security Groups should be maintained carefully, in order to provide network access for desired entities. Having unused Security Groups is giving the oppertunity to accidently assign vulnerbale network access to your resources.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "faa9e946-56ff-4646-8c48-781628e0765e",
        "rule_logic": "Cloudrail will review all of the Network interfaces in your environment, and your Security Groups. Cloudrail will create a list of all used Security Groups, based on the Network interfaces in your environment, which are attached to AWS resources. It will then compare this list to the actual Security Groups in the account. For a Security Group which is present, but not used by any attached Network interface, Cloudrail will raise a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Remove the unused aws_security_group resource from your TF template.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/ensure_no_unused_security_groups_rule.py",
        "rule_name": "Ensure no unused Security Group exists in the account",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Delete the unusued Security Group from your AWS Console.",
        "policy_id": null,
        "rule_id": "car_unused_security_group",
        "severity": "medium"
    },
    {
        "resource_types": [
            "kubernetes"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Logging all control plane activity in EKS is important in order to determine potential bad activity, or to look back to if any issue occurs.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "698dc56f-dfd4-4cf9-8a9b-c3c3f297fe61",
        "rule_logic": "Cloudrail uses checkov to review the aws_eks_cluster resource's enabled_cluster_log_types field. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_eks_cluster resource, set enabled_cluster_log_types argument to the list of log types (api, audit, authenticator, controllerManager, scheduler).",
        "source_control_link": null,
        "rule_name": "Ensure Amazon EKS control plane logging enabled for all log types",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html> to enable EKS control plane logging.",
        "policy_id": null,
        "rule_id": "CKV_AWS_37",
        "severity": "low"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Policies should have specific permissions in order to follow the \"least privilege\" concept. Therefore, having a policy with all permissions included is in violation of best practices.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "0d596e4d-2e0b-4764-93a7-86dbf3558f22",
        "rule_logic": "Cloudrail uses checkov to review the IAM policy looking for statements with all actions included. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_policy resource, update policy argument in order to assign specific permissions instead of full \"*\" administrative privileges.",
        "source_control_link": null,
        "rule_name": "Ensure IAM policies that allow full \"*\" administrative privileges are not created",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_understand-action-summary.html> in order to assign specific permissions instead of full \"*\" administrative privileges.",
        "policy_id": null,
        "rule_id": "CKV_AWS_1",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. EBS volumes may store sensitive data, and therefore should be encrypted.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "1a2d2a7a-c9fc-48b6-a328-d623f70cedcc",
        "rule_logic": "Cloudrail uses checkov to review the EBS volumes' encryption settings. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ebs_volume resource, set encrypted argument to true.",
        "source_control_link": null,
        "rule_name": "Ensure all data stored in the EBS is securely encrypted",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html> to enable EBS encryption at rest.",
        "policy_id": null,
        "rule_id": "CKV_AWS_3",
        "severity": "low"
    },
    {
        "resource_types": [
            "key_mgmt"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Encryption keys should be rotated regularly to decrease the exposure in case a key is somehow discovered. Customer created CMKs should have the keys automatically rotated.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "584dcdc6-3ada-4e10-9732-799d866a9df3",
        "rule_logic": "Cloudrail uses checkov to review the aws_kms_key's enable_key_rotation. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_kms_key resource, set enable_key_rotation argument to true.",
        "source_control_link": null,
        "rule_name": "Ensure rotation for customer created CMKs is enabled",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html> to enable key rotation.",
        "policy_id": null,
        "rule_id": "CKV_AWS_7",
        "severity": "low"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. EBS volumes may store sensitive data, and therefore should be encrypted.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "8a9356b4-583c-4ea1-964d-a428cdc0423e",
        "rule_logic": "Cloudrail uses checkov to review the aws_launch_configuration's and aws_instance's EBS encryption settings. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_launch_configuration resource, in ebs_block_device configuration block, set encrypted argument to true.",
        "source_control_link": null,
        "rule_name": "Ensure all data stored in the Launch configuration EBS is securely encrypted",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html> to enable encryption at rest.",
        "policy_id": null,
        "rule_id": "CKV_AWS_8",
        "severity": "low"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "disaster_recovery",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "It is important to have automatic backups of crucial data. In DynamoDB has a capability to do so through its Point-in-Time feature.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "94832b48-7299-46e4-93f0-cab923fc83ff",
        "rule_logic": "Cloudrail uses checkov to review the aws_dynamodb_table's point_in_time_recovery setting. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_dynamodb_table resource, in point_in_time_recovery block, set enabled argument to true.",
        "source_control_link": null,
        "rule_name": "Ensure DynamoDB Point-in-Time recovery (backup) is enabled",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html> to enable point-in-time recovery.",
        "policy_id": null,
        "rule_id": "CKV_AWS_28",
        "severity": "medium"
    },
    {
        "resource_types": [
            "all"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Hard coding AWS access keys and secret keys in code, where they are visible, can result in hacks. Keys should not be coded in the \"provider\" section of the Terraform code.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "6c98ee09-d80a-40fe-a79a-9215821390ee",
        "rule_logic": "Cloudrail uses checkov to review the AWS provider configuration in your Terraform code.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Remove access_key and secret_key arguments from AWS provider block. Follow <https://registry.terraform.io/providers/hashicorp/aws/latest/docs> to provide credentials using secure methods.",
        "source_control_link": null,
        "rule_name": "Ensure no hard coded AWS access key and and secret key exists in provider",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "",
        "policy_id": null,
        "rule_id": "CKV_AWS_41",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Hard coding AWS access keys and secret keys in code, where they are visible, can result in hacks. Keys should not be coded in the \"environment\" section of a lambda function.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "37b03326-5a22-4eb8-96b5-7a918aed78f1",
        "rule_logic": "Cloudrail uses checkov to review the aws_lambda_function's environment and look for AWS keys. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_lambda_function resource, in environment block, remove variables for AWS access keys and secret keys. Use the role argument to assign permissions to the Lambda function.",
        "source_control_link": null,
        "rule_name": "Ensure no hard coded AWS access key and secret key exists in lambda environment",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html> to update environment variables and remove hardcoded secrets. AWS access keys and secret keys are obtained from the function's execution role.",
        "policy_id": null,
        "rule_id": "CKV_AWS_45",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Hard coding AWS access keys and secret keys in code, where they are visible, can result in hacks. Keys should not be coded in the \"user data\" section of an EC2 instsance.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "75e4d874-fc7f-4de3-a268-6f73ebdecf89",
        "rule_logic": "Cloudrail uses checkov to review the aws_instance's user_data and look for AWS keys. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_instance resource, modify user_data or user_data_base64 arguments in order to remove AWS access key and secret key.",
        "source_control_link": null,
        "rule_name": "Ensure no hard coded AWS access key and secret key exists in EC2 user data",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-view-change> to update EC2 user data and remove AWS access key and secret key.",
        "policy_id": null,
        "rule_id": "CKV_AWS_46",
        "severity": "major"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Policies should have specific permissions in order to follow the \"least privilege\" concept. Therefore, having an SQS policy with all permissions allowed for a principal is in violation of best practices.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "025a5cbe-7362-4c33-aa85-0112501c0915",
        "rule_logic": "Cloudrail uses checkov to review the SQS policy looking for statements with all actions included. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_sqs_queue_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": null,
        "rule_name": "Ensure SQS policy does not allow ALL (*) actions.",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-add-permissions.html> to modify the access policy and remove wildcard actions.",
        "policy_id": null,
        "rule_id": "CKV_AWS_72",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Encryption in transit is often part of the security policy of organizations. Enforcing the use of HTTPS on all data transport is usually easy to do, and important to protect sensitive data.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "884eaa10-0e77-462f-930a-1e2a44d41f5b",
        "rule_logic": "Cloudrail uses checkov to review the aws_elasticsearch_domain's domain_endpoint_options setting. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_elasticsearch_domain resource, configure node_to_node_encryption block with argument enabled = true.",
        "source_control_link": null,
        "rule_name": "Ensure Elasticsearch Domain enforces HTTPS",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/ntn.html> to enable node-to-node encryption for Elasticsearch domain.",
        "policy_id": null,
        "rule_id": "CKV_AWS_83",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Encryption at rest is often part of the security policy of organizations. Glue Data Catalogs may store sensitive data, and therefore should be encrypted. It is possible for a client not to encrypt the data, and therefore a server-side override is needed.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "27eb5d6f-1fa0-403f-8459-8ddbd20015e5",
        "rule_logic": "Cloudrail uses checkov to review the aws_glue_data_catalog_encryption_settings setting. This rule will only review Terraform content and not any resources in your cloud environment.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_glue_data_catalog_encryption_settings resource, in data_catalog_encryption_settings, encryption_at_rest block, set catalog_encryption_mode argument to \"SSE-KMS\".",
        "source_control_link": null,
        "rule_name": "Ensure Glue Data Catalog Encryption is enabled",
        "compliance": {},
        "status": "success",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/glue/latest/dg/encrypt-glue-data-catalog.html> to enable encryption at rest.",
        "policy_id": null,
        "rule_id": "CKV_AWS_94",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Having the same IAM role for both public and private instances may be dangerous. Someone may expand the permissions for the role in order to use it in a private workload, not realizing a public workload has the same privileges.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c46c00ff-46e7-4ec1-be86-79b6a0c2e021",
        "rule_logic": "Cloudrail will iterate over all EC2 resources that use IAM roles. It will classify them between \"public\" (those that are accessible from the Internet) and \"private\" (those that are not). If an IAM role is determined to be associated with at least one public instance and at least one private instance, it will be considered in violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Create an additional aws_iam_role resource with an aws_iam_role_policy attached. Associate this role to the public EC2 instances using an aws_iam_instance_profile resource.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/ec2_role_share_rule.py",
        "rule_name": "EC2(s) within the public and private subnets should not share identical IAM roles",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html> to create an additional IAM role with an IAM role policy attached. Associate this role to the public EC2 instances.",
        "policy_id": null,
        "rule_id": "ec2_role_share_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "It is important that VPCs utilizing a Transit Gateway should not have overlapping CIDR. This becomes problematic overtime as the VPCs will likely experience routing issues.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "b7407291-fe18-4b7e-9270-130af506ee23",
        "rule_logic": "Cloudrail will look at all of your Transit Gateways. For each one, it will determine which VPCs are in use. It will iterate over all VPCs in pairs and compare their CIDR blocks. If there's an intersection in the CIDR blocks (one contains an IP that is contained in the other) a violation will be flagged.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_vpc resource, set cidr_block argument to use a CIDR block that is not overlapping with other VPC CIDRs using the Transit Gateway.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpcs_in_tgw_no_overlapping_cidr_rule.py",
        "rule_name": "VPC's in Transit Gateway should not have common CIDR's",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/working-with-vpcs.html> to specify a VPC CIDR block that is not overlapping with other VPC CIDRs using the Transit Gateway.",
        "policy_id": null,
        "rule_id": "vpcs_in_transit_gateway_no_overlapping_cidr_rule",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 22 (SSH).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "003145b4-ff4e-4b2c-a832-b912ecd4d26c",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 22 (SSH) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the SSH port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 22 (SSH)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the SSH port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_ssh_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 3389 (RDP).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "b21fc41e-e5f5-4819-a014-b40ad5ba2bf7",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 3389 (RDP) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the RDP port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 3389 (RDP)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the RDP port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_rdp_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 1521 (ORACLE DB DEFAULT).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "789216ff-6d36-4cfa-a6f7-a00d9650135a",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 1521 (ORACLE DB DEFAULT) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the ORACLE DB DEFAULT port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 1521 (ORACLE DB DEFAULT)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the ORACLE DB DEFAULT port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_oracle_db_default_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 2483 (ORACLE DB).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c96e6daf-d546-484b-9474-9bea61eb8670",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 2483 (ORACLE DB) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the ORACLE DB port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 2483 (ORACLE DB)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the ORACLE DB port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_oracle_db_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 2484 (ORACLE DB SSL).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "de9bcd0f-fc86-4c52-a493-0162a11a2d55",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 2484 (ORACLE DB SSL) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the ORACLE DB SSL port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 2484 (ORACLE DB SSL)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the ORACLE DB SSL port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_oracle_db_ssl_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 3306 (MYSQL).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "552c2288-915e-4b49-aee4-b3ef93ca2b68",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 3306 (MYSQL) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the MYSQL port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 3306 (MYSQL)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the MYSQL port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_mysql_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 5432 (POSTGRES).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "fe167142-9ecd-4716-9045-24c6ebd00134",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 5432 (POSTGRES) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the POSTGRES port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 5432 (POSTGRES)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the POSTGRES port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_postgres_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 6379 (REDIS).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "94f1c5e5-5f85-46fb-99c8-c5e0135c808f",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 6379 (REDIS) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the REDIS port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 6379 (REDIS)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the REDIS port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_redis_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 27017 (MONGODB).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "b8d06e46-e9e7-4c1d-9730-7ef4053583e7",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 27017 (MONGODB) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the MONGODB port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 27017 (MONGODB)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the MONGODB port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_mongodb_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 27018 (MONGODB SHARD CLUSTER).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f667779b-d15e-4186-b9a6-ca02f7f3a0fc",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 27018 (MONGODB SHARD CLUSTER) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the MONGODB SHARD CLUSTER port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 27018 (MONGODB SHARD CLUSTER)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the MONGODB SHARD CLUSTER port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_mongodb_shard_cluster_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 7199 (CASSANDRA).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "0f158101-44d0-4306-8b76-c6d263095eeb",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 7199 (CASSANDRA) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the CASSANDRA port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 7199 (CASSANDRA)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the CASSANDRA port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_cassandra_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 9160 (CASSANDRA THRIFT).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f260a686-524e-4056-83ff-49ceb8b7333d",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 9160 (CASSANDRA THRIFT) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the CASSANDRA THRIFT port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 9160 (CASSANDRA THRIFT)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the CASSANDRA THRIFT port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_cassandra_thrift_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 8888 (CASSANDRA MNG).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d2db9ec9-c86c-4ee9-bcf7-be3f6f573758",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 8888 (CASSANDRA MNG) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the CASSANDRA MNG port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 8888 (CASSANDRA MNG)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the CASSANDRA MNG port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_cassandra_mng_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 11211 (MEMCACHED).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "79fd6f6c-941d-4812-95ca-158ff480ecb2",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 11211 (MEMCACHED) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the MEMCACHED port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 11211 (MEMCACHED)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the MEMCACHED port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_memcached_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 9300 (ELASTICSEARCH NODES).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e8978ade-800f-4a4e-bf6f-df12446fd533",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 9300 (ELASTICSEARCH NODES) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the ELASTICSEARCH NODES port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 9300 (ELASTICSEARCH NODES)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the ELASTICSEARCH NODES port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_elasticsearch_nodes_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 9200 (ELASTICSEARCH).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "0d98952f-1a86-4023-af22-9168c2d4c724",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 9200 (ELASTICSEARCH) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the ELASTICSEARCH port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 9200 (ELASTICSEARCH)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the ELASTICSEARCH port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_elasticsearch_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially on a known port like 5601 (KIBANA).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c338a460-390b-48f4-8450-fc7db916cf2d",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if it has 5601 (KIBANA) exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has the aforementioned port open. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_security_group, update in-line ingress rules or resource aws_security_group_rule to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the KIBANA port.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to port 5601 (KIBANA)",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update the security group inbound rule. Set the Source parameter to a value other than 0.0.0.0/0 or ::/0 for the KIBANA port.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_kibana_port_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Databases should not be publicly accessible. If a database is serving content to be consumed by external users, it's best to go through an API gateway or some other control point.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "b20fb679-bdb8-4fc9-9b07-f1e6a844f1df",
        "rule_logic": "Cloudrail will review all of the Redshift databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from the Internet. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed from the Internet are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_redshift_cluster resource, set publicly_accessible argument to false. Update the rules of security groups and NACLs to block inbound traffic from Internet to the database instance.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_db_redshift_rule.py",
        "rule_name": "Ensure Redshift database is not publicly accessible",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/managing-clusters-console.html#modify-cluster> to change Publicly accesible to \"No\". Modify also the associated security groups and NACLs to block inbound traffic to the database instance.",
        "policy_id": null,
        "rule_id": "public_access_db_redshift_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Many organizations would like to protect their databases by multiple layers. For instance, they would want to avoid a situation where a publicly-accessible EC2 instance can directly access a database. The reason behind this is to avoid having \u201ctwo hops\u201d into the database from the Internet.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "dfc64424-4985-40ad-b0a7-f7d058ee0e95",
        "rule_logic": "Cloudrail will review all of the Redshift databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from any of the compute resources you have on a public subnet (EC2, ECS, etc.). This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed by a publicly-accessible compute resource are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_redshift_cluster resource, set vpc_security_group_ids or cluster_security_groups arguments to use a Security Group that blocks traffic from publicly-accessible AWS resources.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/indirect_public_access_rules/indirect_public_access_db_redshift_rule.py",
        "rule_name": "Ensure Redshift database is not accessible indirectly via a publicly accessible resource",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/managing-security-groups-console.html> to modify Redshift Security Groups to block traffic from publicly-accessible AWS resources.",
        "policy_id": null,
        "rule_id": "indirect_public_access_db_redshift",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Many organizations would like to protect their databases by multiple layers. For instance, they would want to avoid a situation where a publicly-accessible EC2 instance can directly access a database. The reason behind this is to avoid having \u201ctwo hops\u201d into the database from the Internet.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "db0324f6-a25e-4880-8530-cc1ff3e1087c",
        "rule_logic": "Cloudrail will review all of the RDS databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from any of the compute resources you have on a public subnet (EC2, ECS, etc.). This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed by a publicly-accessible compute resource are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_db_instance resource, set vpc_security_group_ids argument to reference a Security Group that blocks access from publicly-accessible EC2 instances.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/indirect_public_access_rules/indirect_public_access_db_rds_rule.py",
        "rule_name": "Ensure RDS database is not accessible indirectly via a publicly accessible resource",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.RDSSecurityGroups.html> to reference a Security Group that blocks access from publicly-accessible EC2 instances.",
        "policy_id": null,
        "rule_id": "indirect_public_access_db_rds",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Databases should not be publicly accessible. If a database is serving content to be consumed by external users, it's best to go through an API gateway or some other control point.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "130c6adc-7552-43d8-9888-6afcb6d04486",
        "rule_logic": "Cloudrail will review all of the RDS databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from the Internet. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed from the Internet are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_db_instance resource, set publicly_accesible argument to false. Update the rules of security groups and NACLs to block inbound traffic from Internet to the database instance.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_db_rds_rule.py",
        "rule_name": "Ensure RDS database is not publicly accessible",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Hiding> to hide a DB instance in a VPC from the Internet.",
        "policy_id": null,
        "rule_id": "public_access_db_rds_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "AWS accounts created until late 2013 supported EC2 Classic mode. This allowed for an easier configuration of some resources, while having less control over their VPC placement and security. It is not a good practice to continue using EC2 Classic mode.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c0948bed-064b-4b12-ac45-25739df91f05",
        "rule_logic": "Cloudrail will determine if a resource has been configured to use EC2 Classic mode by verifying that the account supports it and the resource does not have a specific VPC set.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Modify those resources using specific arguments for EC2 Classic only and use VPC mode arguments.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/disallow_ec2_classic_mode_rule.py",
        "rule_name": "Ensure EC2-Classic mode is not used",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html> to migrate from EC2 Classic mode to VPC mode.",
        "policy_id": null,
        "rule_id": "disallow_ec2_classic_mode_rule",
        "severity": "low"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Many AWS resources can be configured to reside in a specific VPC. If parameters are left to their default values, AWS may place the resource in the default VPC. This isn\u2019t a good practice, as it\u2019s best to specifically configure such parameters. Cloudrail will determine if resources are placed in the default VPC.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "77204180-5d7d-4657-8b3f-b88f76fb65b2",
        "rule_logic": "Cloudrail will review all resources configured to determine if any of them is set to use the default VPC. This includes resources that may have no VPC ID set and would be assigned the default VPC upon creation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Create aws_security_group resources for those AWS resources using default VPC security group.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/disallow_resources_in_default_vpc_rule.py",
        "rule_name": "Ensure the default VPC is not used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "2.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html> to create specific Security Groups for those resources.",
        "policy_id": null,
        "rule_id": "disallow_default_vpc",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Cloudrail will review all of the Elasticsearch domains configured in your environment. For each domain it will review if it is set to be publicly accessible.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "6da13cd3-4803-4bed-89db-fbc96c22c504",
        "rule_logic": "Cloudrail will review all of the Elasticsearch domains configured in your environment. For each domain it will review if it is set to be publicly accessible.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticsearch_domain resource, in vpc_options block, set subnet_ids and security_group_ids arguments.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_elasticsearch_rule.py",
        "rule_name": "Ensure Elasticsearch Domain is not publicly accessible",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html> to configure VPC access instead of Public access in Network configuration section.",
        "policy_id": null,
        "rule_id": "public_access_elasticsearch_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Many organizations would like to protect their Elasticsearch domains by multiple layers. For instance, they would want to avoid a situation where a publicly-accessible EC2 instance can directly access an ES domain. The reason behind this is to avoid having \u201ctwo hops\u201d into the ES domain from the Internet.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5ff98474-4fab-4fef-bea8-f87eedcbfb7d",
        "rule_logic": "Cloudrail will review all of the ES domains configured in your environment. For each database, it will review the security groups in use (whether VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the ES domain can be accessed from any of the compute resources you have on a public subnet (EC2, ECS, etc.). This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only domains which can truly be accessed by a publicly-accessible compute resource are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticsearch_domain resource, in vpc_options block, set security_group_ids argument to reference a Security Group that blocks access from compute resources in public subnets.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/indirect_public_access_rules/indirect_public_access_elastic_search_rule.py",
        "rule_name": "Ensure Elasticsearch Domain is not accessible indirectly via a publicly accessible resource",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html> to configure the Security Groups to block access from compute resources in public subnets.",
        "policy_id": null,
        "rule_id": "indirect_public_access_elastic_search_rule",
        "severity": "medium"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "It's important to ensure that only specific networks are exposed through a VPC peering connection. Exposing an entire VPC through the connection may create the risk of exposing resources that were not intended.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "13659102-35a6-4a3d-94ef-b659e73b621f",
        "rule_logic": "Cloudrail will review all of the routing tables configured in your environment that have routes pointing to a VPC peer. It will then cross reference these routing tables with the subnets they are attached to, and with the resources they are used with, to determine they are used at all. For those routing tables that are used, Cloudrail will review the routes defined and cross-reference them with the VPC\u2019s CIDR block. If a route is found to exactly match the CIDR block, it will be highlighted by Cloudrail. By doing this context-based analysis, Cloudrail ensures that only routing tables who pose a true security risk are highlighted. NOTE: If a VPC Peering Connection is created through Terraform, to a VPC in a different account, Cloudrail will only be able to evaluate this rule after the connection has been established. This is due to the lack of knowledge of the peer VPC\u2019s CIDR block.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_route resource, set destination_cidr_block argument to use specific routes for VPC peering.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_peering_least_access_rule.py",
        "rule_name": "Ensure used routing tables for VPC peering are \"least access\"",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.4"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/peering/peering-configurations-partial-access.html> to configure specific routes for VPC peering.",
        "policy_id": null,
        "rule_id": "vpc_peering_least_access",
        "severity": "low"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Elasticsearch Domains should be encrypted whenever possible. Because it is easy to do upon resource creation, Cloudrail will flag a violation if a domain that is set to be created does not have encryption at rest turn on.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "306168cf-20f4-4b0e-a5cf-3f1f92a9ce03",
        "rule_logic": "Cloudrail will review the Elasticsearch domains being created in your environment. If a domain is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticsearch_domain resource, configure encrypt_at_rest block with argument enabled = true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/es_encrypt_at_rest_rule.py",
        "rule_name": "Ensure Elasticsearch Domains being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/encryption-at-rest.html> to enable encryption at rest for Elasticsearch domain.",
        "policy_id": null,
        "rule_id": "non_car_es_domain_encrypt_at_rest_creating",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Elasticsearch domains being created in your environment. If a domain is not set to encrypt node-to-node communication, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d997a841-b5b0-4b29-9fae-4dfe71073cba",
        "rule_logic": "Cloudrail will identify all Elasticsearch domains in the Terraform plan that are going to be created and are not configured to encrypt node-to-node communication.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticsearch_domain resource, configure node_to_node_encryption block with argument enabled = true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/es_encrypt_node_to_node_rule.py",
        "rule_name": "Ensure Elasticsearch domains being created are set to be encrypted node-to-node",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/ntn.html> to enable node-to-node encryption for Elasticsearch domain.",
        "policy_id": null,
        "rule_id": "not_car_elasticsearch_domains_encrypted_note_to_node",
        "severity": "major"
    },
    {
        "resource_types": [
            "kubernetes"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "The EKS cluster's management API is a sensitive endpoint to expose publicly. Cloudrail will determine if such an exposure occurred.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "555ad8d2-f0fa-40c7-99a9-8e8e883b5402",
        "rule_logic": "Cloudrail will review all of the EKS clusters configured in your environment. For each cluster, it will review the whether the API has a public IP and whether it is Internet-accessible on the subnets it\u2019s attached to. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only EKS clusters whose API can truly be accessed from the Internet are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_eks_cluster resource, in vpc_config block, set endpoint_public_access argument to false.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_eks_api_rule.py",
        "rule_name": "Ensure EKS API is not publicly accessible",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "7.1",
                    "10.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://aws.amazon.com/premiumsupport/knowledge-center/eks-public-private-access-api-server/> to configure private access to the EKS API.",
        "policy_id": null,
        "rule_id": "public_access_eks_api",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Best practices encourage encryption of communication between each two entities in your environment. This includes between a load balancer and the servers it is connected to.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "220c116c-c7db-4d11-83b5-81352d28b163",
        "rule_logic": "Cloudrail will review the load balancers and target groups configured in your environment. If a target group is in use and is communicating with its targets in HTTP, Cloudrail will flag a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_lb_target_group resource, set the protocol argument to use HTTPS.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/alb_disallow_target_groups_http_rule.py",
        "rule_name": "Ensure target groups are not using HTTP",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-target-group.html> to configure HTTPS Protocol.",
        "policy_id": null,
        "rule_id": "non_car_alb_target_group_no_http",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Generally, all S3 buckets, with specific exceptions, should not be publicly accessible. Access should be permitted only to specific entities and services, through tightly controlled policies.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "46efb99a-7737-4658-a544-113579196fe2",
        "rule_logic": "Cloudrail will review the S3 buckets being created in your environment. For each bucket, it will analyze its ACLs and bucket policies. If an S3 bucket is allowing public access through an ACL (whether canned or user provided), or it is allowing cross-account access through ACL, or is allowing either of the above through a bucket policy, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket resource, set the acl or grant arguments to restrict public access using an ACL, and set the policy argument to use a bucket policy that restricts public access. Additionally, if aws_s3_bucket_policy resource is being used, set policy argument to use a policy that restricts public access.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/s3_acl_allow_public_access_rule.py",
        "rule_name": "Ensure S3 buckets are not made widely accessible through ACLs and bucket policies",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "7.1",
                    "10.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-bucket-permissions.html> to modify the S3 bucket ACL, and <https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-bucket-policy.html> to modify the S3 bucket policy.",
        "policy_id": null,
        "rule_id": "s3_acl_disallow_public_and_cross_account",
        "severity": "major"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "The CloudFront protocol used is an important piece of securing the content flowing between your users and your infrastructure. It's important to use protocol versions that are considered more secure.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "0b1e6f3c-cd31-471a-a147-43f8fe1ce807",
        "rule_logic": "Cloudrail will review the CloudFront distributions in your environment. If a CloudFront distribution is using an insecure protocol version (pre TLSv1.2_2019), Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudfront_distribution resource, in viewer_certificate block, set minimum_protocol_version argument to use a secure protocol version.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/ensure_cloudfront_protocol_version_is_good.py",
        "rule_name": "Ensure CloudFront protocol version is a good one",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy> to configure the Security Policy to use a secure protocol version.",
        "policy_id": null,
        "rule_id": "non_car_cloudfront_protocol_version",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Best practices dictate that IAM permissions are given to roles, groups, etc., and never directly to users.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5627180d-7a26-45e9-90cf-a9e246244240",
        "rule_logic": "Cloudrail will review the IAM settings in your environment, and specifically the users being created. If a user is assigned a permission policy directly, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Remove the permission policy attached to the user. Create a new aws_iam_group resource and attach the permission policy. Use the resource aws_iam_user_group_membership for adding the user to the group.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_user_directly_attach_policies_rule.py",
        "rule_name": "Ensure IAM permissions are not given directly to users",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "1.15"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html> to create an IAM group with the permission policy. Remove the permission policy from the user and follow the guide at to add the IAM user to an IAM group.",
        "policy_id": null,
        "rule_id": "non_car_iam_no_permissions_directly_to_user",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the CloudFront Distributions in your environment. If it is not using HTTPS, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "47a35cbd-e5af-4fad-a676-0e2403a4bf60",
        "rule_logic": "Look for CloudFront Distributions, then look inside default_cache_behavior block and ordered_cache_behavior block (can exist several ordered blocks) in order to check the values of: viewer_protocol_policy to ensure it is set to either \u201chttps-only\u201d or \u201credirect-to-https\u201d",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudfront_distribution resource, in default_cache_behavior/ordered_cache_behavior blocks, set the viewer_protocol_policy argument to https-only or redirect-to-https.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_in_transit/ensure_cloudfront_distribution_encrypt_in_transit_rule.py",
        "rule_name": "Ensure CloudFront Distribution being created are set to encrypt in transit",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html> to enable HTTPS Protocol.",
        "policy_id": null,
        "rule_id": "non_car_cloudfront_distribution_encrypt_in_transit",
        "severity": "medium"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "In most cases, it is inadvisable to be using HTTP, as confidential or sensitive data may be transported over it, and it\u2019s best to use HTTPS.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "87affa9f-6196-424a-92cd-c48c53fa11b1",
        "rule_logic": "Cloudrail will review the load balancers configured in your environment. If a load balancer is using HTTP, instead of HTTPS, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_lb_listener resource, set protocol argument to HTTPS. Also set ssl_policy and certificate_arn arguments.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/ensure_alb_is_using_https.py",
        "rule_name": "Ensure ALB is using HTTPS and not HTTP",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-application-load-balancer.html#configure-security-settings> to create a listener that uses HTTPS Protocol.",
        "policy_id": null,
        "rule_id": "non_car_alb_https",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "There have been hacks in the past caused by the use of IMDSv1. It is now best practice to disable IMDSv1 and use IMDSv2. It\u2019s important to test the disablement of IMDSv1 carefully, as it may cause issues in an application\u2019s execution (if it using an old SDK, for example).",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "60727db2-8516-422b-94e7-dcb6803fc2fb",
        "rule_logic": "Cloudrail will review configurations of EC2 instances, launch configurations, and launch templates used in the environment. If they are set to allow IMDSv1, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_instance resource, in metadata_options block, set http_tokens argument to required.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/ensure_imdsv2_is_used_rule.py",
        "rule_name": "Ensure IMDSv2 is used and IMDSv1 is disabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html> to change the instance metadata for existing instances. Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html> to configure instance metadata for new instances.",
        "policy_id": null,
        "rule_id": "non_car_ensure_imdsv2",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the API Gateways in your environment. If it has caching enabled but not encrypted in any stage and in any method, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "7234371f-cafa-43e0-83b9-50acd15fc432",
        "rule_logic": "Cloudrail will identify all API Gateways within your AWS account and Terraform plan that have caching enabled and are not configured to be encrypted at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_api_gateway_method_settings resource with caching enabled, in settings block, set cache_data_encrypted argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/ensure_api_gw_caching_encrypted_rule.py",
        "rule_name": "Ensure API Gateway with caching enabled is set to be encrypted",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html> to encrypt cache data.",
        "policy_id": null,
        "rule_id": "non_car_api_gateway_caching_encrypted",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Athena Workgroups in your environment. If a Workgroup is not set to encrypt at rest the query results, or has it set, but not enforced on the clients, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "b8203050-e99f-4453-9961-4357037d4994",
        "rule_logic": "Cloudrail will identify all Athena workgroups within your AWS account and Terraform plan. If the workgroup does not enforce the use of the workgroup config, a violation will be highlighted. If it does, and the config doesn\u2019t have encryption enabled, a violation will be highlighted as well.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_athena_workgroup resource, in configuration, result_configuration, encryption_configuration block, set the encryption_option argument. Additionally, in configuration, set enforce_workgroup_configuration to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_athena_workgroups_results_encrypted_rule.py",
        "rule_name": "Ensure Athena Workgroup query results are set to be encrypted at rest and enforced on clients",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/athena/latest/ug/encrypting-query-results-stored-in-s3.html> to encrypt query results.",
        "policy_id": null,
        "rule_id": "non_car_athena_workgroup_query_results_encrypt_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Best practices recommend the use of SSO instead of defining specific users at the account-level.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f34c0b86-fa0e-4f73-9a22-395bdc749b54",
        "rule_logic": "Cloudrail will look at all existing users, and those about to be created, and determine if they are set to be used by humans. This determination is done by looking to see if the user has console access.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Remove the aws_iam_user resource for those identified IAM users.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_no_human_users_rule.py",
        "rule_name": "Ensure no human IAM users defined",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting> to remove identified IAM users.",
        "policy_id": null,
        "rule_id": "non_car_iam_no_human_users",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Redshift clusters being created in your environment. If a cluster is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d95a1efa-403c-4054-ac6e-337e5a0face2",
        "rule_logic": "Cloudrail will identify all Redshift clusters in the Terraform plan that are going to be created and are not configured to encrypt data at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_redshift_cluster resource, set encrypted argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_redshift_cluster_created_encrypted_rule.py",
        "rule_name": "Ensure Redshift clusters being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/changing-cluster-encryption.html> to enable encryption at rest.",
        "policy_id": null,
        "rule_id": "non_car_redshift_cluster_encrypt_at_rest_creating",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid the need of sending data destined to S3 through the internet. Cloudrail will identify misconfigurations and exposure by checking if VPC Endpoint Gateways are in use or not, by reviewing VPC Endpoint and route tables in all regions.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "9602fa1b-b645-4e3b-8b13-8bd0c6027d9e",
        "rule_logic": "Cloudrail will identify all buckets and the regions where they exist. For each region, it will check that there is a VPC Endpoint for S3 created, if so it will check which route tables it's associated to, it will then check all route tables to identify which ones are not associated to a VPC Endpoint for S3 and will flag them as non-compliant. It will check the routing tables in each VPC to avoid alerting on subnets that don't have internet access.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_vpc_endpoint_route_table_association resource, set the route_table_id and vpc_endpoint_id arguments for the S3 service.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_endpoints/vpc_endpoint_route_table_exposure_rule.py",
        "rule_name": "Ensure VPC Endpoint for S3 is enabled in all route tables in use in a VPC",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-gateway.html#vpc-endpoints-routing> to configure the route tables to route S3 service traffic via the endpoint.",
        "policy_id": null,
        "rule_id": "endpoint_s3_route_table_exposure",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "A best practice is to enforce the use of VPC Endpoints to avoid the need of sending data destined to DynamoDB through the internet. Cloudrail will identify misconfigurations and exposure by checking if VPC Endpoint Gateways are in use or not, by reviewing VPC Endpoint and route tables in all regions.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "7980d1f2-ff6b-4948-b1a2-aed79d70f048",
        "rule_logic": "Cloudrail will identify all tables and the regions where they exist. For each region, it will check that there is a VPC Endpoint for DynamoDB created, if so it will check which route tables it's associated to, it will then check all route tables to identify which ones are not associated to a VPC Endpoint for DynamoDB and will flag them as non-compliant. It will check the routing tables in each VPC to avoid alerting on subnets that don't have internet access.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_vpc_endpoint_route_table_association resource, set the route_table_id and vpc_endpoint_id arguments for the DynamoDB service.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/vpc_endpoints/vpc_endpoint_route_table_exposure_rule.py",
        "rule_name": "Ensure VPC Endpoint for DynamoDB is enabled in all route tables in use in a VPC",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-gateway.html#vpc-endpoints-routing> to configure the route tables to route DynamoDB service traffic via the endpoint.",
        "policy_id": null,
        "rule_id": "endpoint_dynamodb_route_table_exposure",
        "severity": "medium"
    },
    {
        "resource_types": [
            "service_endpoint",
            "iam"
        ],
        "is_custom": false,
        "security_layer": "storage",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "In an environment where VPC Endpoints are used for S3, and private S3 buckets are created, it\u2019s important to consider the use of a source VPCE condition in the bucket policy. Often times, this will be missed, which means that an attacker can use stolen credentials outside of your VPCs.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "961cf36d-b940-46fe-8714-2cb553a59b07",
        "rule_logic": "First check if there is a bucket in the region, if so check that at least one VPC Endpoint for S3 exists. Then, for each private bucket in the region get the policy and check if a condition which contains the string \"aws:SourceVpce\" which would indicate that the policy is limiting the source of the requests.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket_policy resource, modify policy argument to include a condition \"aws:SourceVpce\" in order to restrict access to a specific VPC endpoint.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/s3_bucket_policy_vpc_endpoint_rule.py",
        "rule_name": "Ensure that the private bucket's policy reference a VPC Endpoint as source",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies-vpc-endpoint.html> to modify S3 bucket policy and restrict access to a specific VPC endpoint.",
        "policy_id": null,
        "rule_id": "s3_bucket_policy_vpce",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the DocDB clusters being created in your environment. If a cluster is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c1498597-a8dc-4783-baa0-647ee040f11f",
        "rule_logic": "Cloudrail will identify all DocumentDB clusters in the Terraform plan that are going to be created and are not configured to encrypt data at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_docdb_cluster resource, set storage_encrypted argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_docdb_clusters_encrypted_rule.py",
        "rule_name": "Ensure DocDB clusters being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/encryption-at-rest.html> to enable encryption at rest.",
        "policy_id": null,
        "rule_id": "not_car_docdb_cluster_encrypted_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the DynamoDB DAX clusters being created in your environment. If a cluster is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c734fbeb-d475-488f-bf5c-fc81607f4314",
        "rule_logic": "Cloudrail will identify all DynamoDB Accelerator (DAX) clusters in the Terraform plan that are going to be created and are not configured to encrypt data at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_dax_cluster resource, in server_side_encryption block, set enabled argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_dax_clusters_encrypted_rule.py",
        "rule_name": "Ensure DynamoDB DAX clusters being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAXEncryptionAtRest.html> to enable encryption at rest.",
        "policy_id": null,
        "rule_id": "not_car_dynamodb_dax_clusters_encrypted_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the S3 buckets in your environment. If an S3 bucket is not set to be encrypted at rest, and the bucket is not public, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "826b83ef-4aea-4968-aa91-4d10040a89da",
        "rule_logic": "Cloudrail will identify all S3 buckets within your AWS account and Terraform plan that are not configured to encrypt data at rest and are not public.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket resource, in server_side_encryption_configuration, rule, apply_server_side_encryption_by_default block, set sse_algorithm argument to an allowed value.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_s3_buckets_encrypted_rule.py",
        "rule_name": "Ensure S3 buckets are set to be encrypted at rest",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "2.1.1"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html> to enable S3 bucket encryption at rest.",
        "policy_id": null,
        "rule_id": "not_car_s3_buckets_encrypted_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using versioning is a good practice to deal with accidental deletion or modifications. Cloudrail will review your buckets to ensure versioning is enabled. This rule is not context aware",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "90bc726a-1600-4eeb-bf1c-179872531f76",
        "rule_logic": "Cloudrail will review all S3 buckets within your AWS account and Terraform plan. If versioning is not enabled, this rule will trigger.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket resource, in versioning block, set enabled argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_s3_buckets_versioning_rule.py",
        "rule_name": "Ensure S3 buckets have versioning enabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/userguide/manage-versioning-examples.html> to enable S3 bucket versioning.",
        "policy_id": null,
        "rule_id": "not_car_s3_buckets_versioning_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the S3 bucket objects being created in your Terraform plan. If a bucket object is not set to encrypt at rest, within a bucket that is not public, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "ae53a23b-80bd-4360-97cf-b03d0bd334dd",
        "rule_logic": "Cloudrail will identify all S3 objects in the Terraform plan that are going to be created, are not configured to encrypt data at rest and are created in a non-public bucket. Cloudrail will NOT access the S3 objects you already have in your cloud environment. Cloudrail also will not access the contents of the objects in your Terraform plan.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket_object resource, set server_side_encryption argument to \"AES256\".",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_s3_buckets_object_encrypted_rule.py",
        "rule_name": "Ensure S3 bucket objects are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-object-encryption.html> to enable S3 bucket object encryption at rest.",
        "policy_id": null,
        "rule_id": "not_car_s3_bucket_object_encrypt_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the RDS instances, clusters and global clusters being created in your environment. If an instance, cluster or global cluster is not set to be encrypted at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "0099aea8-ead0-43e8-aa5d-6ecf65199fe8",
        "rule_logic": "Cloudrail will identify all RDS instances, clusters and global clusters in the Terraform plan that are going to be created and are not configured to be encrypted at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_db_instance, aws_rds_global_cluster, and aws_rds_cluster resources, set the storage_encrypted argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_rds_instance_encrypt_at_rest_rule.py",
        "rule_name": "Ensure RDS instances/clusters being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html> to enable encryption for RDS instances. Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.CreateInstance.html> to enable encryption for RDS clusters. Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-getting-started.html> to enable encryption for RDS global clusters.",
        "policy_id": null,
        "rule_id": "not_car_rds_instances_encrypted_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the RDS cluster instances being created in your environment. If an RDS cluster instance is not set to encrypt the performance insights with a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "ca822ae4-0eef-460a-8e3c-14b55aad3171",
        "rule_logic": "Cloudrail will identify all RDS cluster instances in the Terraform plan that are going to be created and are not configured to encrypt the performance insights using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_rds_cluster_instance resource, set performance_insights_kms_key_id argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_rds_cluster_instances_encrypted_at_rest_rule_with_customer_managed_cmk.py",
        "rule_name": "Ensure RDS cluster instances being created are set to encrypt the performance insights with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.Enabling.html> to enable Performance Insights encryption using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_rds_cluster_instance_encrypt_performance_insights_with_customer_managed_cmk_creating",
        "severity": "low"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Cloudwatch Log Groups being created in your environment. If a Log Group is not set to encrypt at rest using KMS CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "dd58af0d-53c9-4b52-9a10-2f3ab4cc915b",
        "rule_logic": "Cloudrail will identify all Cloudwatch Log Groups in the Terraform plan that are going to be created and are not configured to encrypt data at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudwatch_log_group resource, set kms_key_id argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_cloud_watch_log_groups_encrypted_rule.py",
        "rule_name": "Ensure Cloudwatch Log Groups being created are set to be encrypted at rest using KMS CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html> to set encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "not_car_cloudwatch_log_group_encrypted_at_rest_using_kms_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "code",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Some organizations may only allow the use of private AMIs. If this rule is enabled, any EC2 instance attempting to use a public AMI will be flagged.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a0878830-b8ac-4819-8c8d-d2b7323d2f59",
        "rule_logic": "Cloudrail will look for all EC2 instances in your Terraform plan and live account. For those, it will inspect the AMI ID they are set to use. It will cross reference the ID with the list of AMI IDs that are privately defined in the account or shared with it privately. If it\u2019s not on that list, and it\u2019s not an AMI currently being created by the TF plan, the EC2 resource will be flagged.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_instance resource, update the ami argument to set an approved AMI. Terraform will destroy and create new resources.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/allow_only_private_amis_rule.py",
        "rule_name": "Allow only private AMIs to be used",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html> in order to terminate flagged EC2 instances and create new EC2 instance with an approved AMI.",
        "policy_id": null,
        "rule_id": "non_car_ec2_amis_private_only",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Athena Workgroups being created in your environment. If a Workgroup is not set to encrypt at rest the query results using customer-managed CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5c3cf805-cb1c-4588-a073-8a2108a021b0",
        "rule_logic": "Cloudrail will identify all Athena workgroups within your Terraform plan that are going to be created and are encrypting at rest the query results without using customer-managed CMKs.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_athena_workgroup resource, in configuration, result_configuration, encryption_configuration block, set the encryption_option argument to \"SSE_KMS\" and set kms_key_arn argument to use a customer-managed CMK. Additionally, in configuration, set enforce_workgroup_configuration to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_athena_workgroups_encryption_cmk_rule.py",
        "rule_name": "Ensure Athena Workgroup query results being created are set to be encrypted at rest using customer-managed CMKs",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/athena/latest/ug/encrypting-query-results-stored-in-s3.html> to encrypt query results using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_athena_workgroup_query_results_encrypt_at_rest_using_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the CloudTrail trails in your environment. If a trail is not set to encrypt at rest using SSE-KMS, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "84583f7e-2a77-4f86-b402-fc09aae62b62",
        "rule_logic": "Cloudrail will identify CloudTrail trails within your AWS account and Terraform plan that are not configured to encrypt at rest using SSE-KMS.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudtrail resource, set kms_key_id argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_cloudtrail_encryption_kms_rule.py",
        "rule_name": "Ensure CloudTrail trails are set to be encrypted at rest using SSE-KMS",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/awscloudtrail/latest/userguide/encrypting-cloudtrail-log-files-with-aws-kms.html> to set encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "not_car_cloudtrail_trails_encrypt_at_rest_with_sse_kms",
        "severity": "medium"
    },
    {
        "resource_types": [
            "code"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the CodeBuild projects in your environment. If a project is not set to encrypt at rest using customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "95e2e412-4b55-4c61-adf2-89fdfee7ca4a",
        "rule_logic": "Cloudrail will identify CodeBuild projects within your AWS account and Terraform plan that are not configured to encrypt at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_codebuild_project resource, set encryption_key argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_code_build_projects_encrypted_rule.py",
        "rule_name": "Ensure CodeBuild projects are set to be encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/codebuild/latest/userguide/security-encryption.html> to set encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "not_car_codebuild_projects_encrypted_at_rest_with_customer_managed_CMK",
        "severity": "low"
    },
    {
        "resource_types": [
            "code"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Codebuild report groups in your environment. If a Report Group is not set to encrypt at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "54b61c60-57f7-4c2a-85f6-a7b4601f5a5f",
        "rule_logic": "Cloudrail will identify CodeBuild report groups within your AWS account and Terraform plan that are not configured to encrypt at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_codebuild_report_group resource, in export_config, s3_destination block, set encryption_key argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_code_build_report_group_encrypted_at_rest_with_customer_managed_cmk_rule.py",
        "rule_name": "Ensure Codebuild report groups being created are set to be encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/codebuild/latest/userguide/test-report-group-create-console.html> to enable report group encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "not_car_codebuild_report_groups_encrypted_at_rest_with_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "queuing"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the SQS queues in your environment. If a queue is not set to encrypt at rest, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "8d65c557-68c7-4983-85a3-362f15bdc69f",
        "rule_logic": "Cloudrail will identify all SQS queues within your AWS account and Terraform plan that are not configured to encrypt data at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_sqs_queue, set kms_master_key_id argument to specify a key ID.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_sqs_queues_encrypted_at_rest_rule.py",
        "rule_name": "Ensure SQS queues are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html> to enable encryption at rest for SQS queue.",
        "policy_id": null,
        "rule_id": "non_car_sqs_queue_encrypt_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the SQS queues in your environment. If a queue is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "1bb99cb3-daa6-40c7-8a96-e6f409dc7206",
        "rule_logic": "Cloudrail will identify SQS queues within your AWS account and Terraform plan that are not configured to be encrypted at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_sqs_queue resource, set the argument kms_master_key_id to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_sqs_queues_encrypted_at_rest_with_customer_managed_cmk_rule.py",
        "rule_name": "Ensure SQS queues are encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html> to enable encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_sqs_queues_encrypted_at_rest_with_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Elasticache replication groups being created in your environment. If a replication group is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "62b82189-3986-45e8-a775-4b887fb7c09b",
        "rule_logic": "Cloudrail will identify all Elasticache replication groups in the Terraform plan that are going to be created and are not configured to be encrypted at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticache_replication_group resource, set at_rest_encryption_enabled argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_elasticache_replication_groups_encrypted_at_rest_rule.py",
        "rule_name": "Ensure Elasticache replication groups being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/at-rest-encryption.html> to enable encryption at rest.",
        "policy_id": null,
        "rule_id": "non_car_elasticache_replication_group_encrypt_at_rest_creating",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Elasticache replication groups being created in your environment. If a replication group is not set to encrypt in transit, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "4a83ddca-20c7-4b29-b6e8-a29fc8a7c682",
        "rule_logic": "Cloudrail will identify all Elasticache replication groups in the Terraform plan that are going to be created and are not configured to be encrypted in transit.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticache_replication_group resource, set the transit_encryption_enabled argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_in_transit/ensure_elasticache_replication_groups_encrypted_in_transit_rule.py",
        "rule_name": "Ensure Elasticache replication groups being created are set to be encrypted in transit",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/in-transit-encryption.html> to enable encryption in transit.",
        "policy_id": null,
        "rule_id": "non_car_elasticache_replication_group_encrypt_in_transit_creating",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Neptune clusters being created in your environment. If a cluster is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "da472f5c-3791-4244-9690-3401b70b5288",
        "rule_logic": "Cloudrail will identify all Neptune clusters in the Terraform plan that are going to be created and are not configured to be encrypted at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_neptune_cluster resource, set storage_encrypted argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_neptune_cluster_encrypted_at_rest_rule.py",
        "rule_name": "Ensure Neptune clusters being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/encrypt.html> to enable encryption at rest.",
        "policy_id": null,
        "rule_id": "non_car_neptune_cluster_encrypt_at_rest_creating",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Neptune clusters being created in your environment. If a cluster is not set to encrypt data at rest with a customer-managed CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "133b5ee2-db67-4804-8b25-1f3f796ef0a8",
        "rule_logic": "Cloudrail will identify all Neptune clusters in the Terraform plan that are going to be created and are not configured to encrypt data at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_neptune_cluster resource, set storage_encrypted argument to true and set kms_key_arn argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_neptune_cluster_encrypted_at_rest_rule_with_customer_managed_cmk.py",
        "rule_name": "Ensure Neptune clusters being created are set to be encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/encrypt.html> to enable encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_neptune_cluster_encrypt_at_rest_with_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "queuing"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "417ebe26-2a87-4b82-b0df-2ec14df49b7c",
        "rule_logic": "Cloudrail will review the SQS queue policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_sqs_queue_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of SQS queue policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html> to modify SQS queue policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_sqs_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "notification"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the SNS topics in your environment. If a topic is not set to encrypt at rest, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "6bf7ee40-1fa3-427e-aea6-727ddcf00b74",
        "rule_logic": "Cloudrail will identify all SNS topics within your AWS account and Terraform plan that are not configured to encrypt data at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the resource aws_sns_topic, set kms_master_key_id argument to specify a key ID.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_sns_topic_encrypted_at_rest_rule.py",
        "rule_name": "Ensure SNS topics are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html> to enable encryption at rest for SNS topic.",
        "policy_id": null,
        "rule_id": "non_car_sns_topic_encrypt_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "notification"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the SNS topics in your environment. If a topic is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "56a9aa8c-5863-4643-ae14-eb7501c33845",
        "rule_logic": "Cloudrail will review the SNS topics in your environment. If a topic is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_sns_topic resource, set kms_master_key_id argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_sns_topic_encrypted_at_rest_with_customer_managed_cmk_rule.py",
        "rule_name": "Ensure SNS topics are encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html> to enable SNS topic encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_sns_topics_encrypted_at_rest_with_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "code"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f73d4454-a8f1-4d0c-86fa-3f8016f2f142",
        "rule_logic": "Cloudrail will review the ECR repository policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ecr_repository_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of ECR repository policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html> to modify ECR repository policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_ecr_repo_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "3e6df3e0-7f30-4fa8-b8df-aa5eb702c8b6",
        "rule_logic": "Cloudrail will review the S3 bucket policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of S3 bucket policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-policy-language-overview.html> to modify S3 bucket policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_s3_bucket_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "key_mgmt"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Secrets Manager secrets config in your environment. If secrets are not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation. Cloudrail does not access the contents of the secrets themselves.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a6fc901f-4b20-435c-b5e5-ee85113e74a3",
        "rule_logic": "Cloudrail will identify Secrets Manager secrets within your AWS account and Terraform plan that are not configured to be encrypted at rest using a customer-managed CMK. Cloudrail does not access the secrets contents themselves.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_secretsmanager_secret resource, set kms_key_id argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_secrets_manager_secrets_encrypted_at_rest_with_customer_amanaged_cmk_rule.py",
        "rule_name": "Ensure Secrets Manager secrets are encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html> to set encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_secrets_manager_secrets_encrypted_at_rest_with_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "key_mgmt"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f8585353-7902-489b-8350-a0bdcb1a7ffe",
        "rule_logic": "Cloudrail will review the KMS keys policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_kms_key resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of KMS key policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html> to modify key policy policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_kms_key_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "4c54e267-5d5d-44cf-8536-02ee99ad1327",
        "rule_logic": "Cloudrail will review the API Gateway endpoint policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_api_gateway_rest_api_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of API Gateway endpoint policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies-examples.html> to modify API Gateway policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_api_gateway_endpoint_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d24b25ec-a46b-44ba-b284-798e6f97a84d",
        "rule_logic": "Cloudrail will review the CloudWatch Logs destination policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudwatch_log_destination_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of CloudWatch Logs destination policy, and no action wildcards are being used",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#resource-based-policies-cwl> to modify CloudWatch Logs destination policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_cloudwatch_logs_destination_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d123abe4-48aa-442d-b5eb-8eb12282447c",
        "rule_logic": "Cloudrail will review the Elasticsearch Service domain policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticsearch_domain_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of Elasticsearch Service domain policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-ac.html#es-ac-types-resource> to modify Elasticsearch Service domain policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_es_service_domain_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "2e9a1c88-670a-4982-9bd5-d3ad36c86b28",
        "rule_logic": "Cloudrail will review the EFS file system policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_efs_file_system_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of EFS file system policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies> to modify EFS file system policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_efs_fs_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "14b51283-f364-44df-bff9-c9d489dbb1e7",
        "rule_logic": "Cloudrail will review the S3 Glacier vault policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_glacier_vault resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of S3 Glacier vault policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html> to modify S3 Glacier vault policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_glacier_vault_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. It is a best practice to give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a50332e3-fe7f-4971-b559-1ec355cf0f70",
        "rule_logic": "Cloudrail will review the Glue data catalog policies being created in your environment or currently in use. If a policy is using wildcard actions, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_glue_resource_policy resource, ensure the attached policy does not contain wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_glue_data_catalog_policy_not_use_wildcard_rule.py",
        "rule_name": "Ensure use of Glue data catalog policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/glue/latest/dg/glue-resource-policies.html> to modify the policy and ensure it is not using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_glue_data_catalog_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "key_mgmt"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. In addition, using a resource policy will provide an additional layer of security. It is a best practice to use a resource policy and give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "71b359d8-ac45-490a-ab55-1a1c637651bf",
        "rule_logic": "Cloudrail will review the Secrets Manager secret policies being created in your environment or currently in use. If a policy is using wildcard actions, or no resource policy configured, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_secretsmanager_secret_policy resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of Secrets Manager secret policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_policy-types.html> to modify Secrets Manager secret policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_secrets_manager_secret_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the DocDB clusters in your environment. If a cluster is not set to encrypt in transit, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e8791fd8-8c9f-4163-b7b7-429d5042790f",
        "rule_logic": "Cloudrail will identify all DocumentDB clusters within your AWS account and Terraform plan that are not configured to perform encryption in transit.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_docdb_cluster_parameter_group resource, in parameter block, ensure parameter \"name\" is equal to \"tls\" and \"value\" is equal to \"enabled\", or just remove those two parameter to create the DocDB cluster with encryption in transit enabled by default.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_in_transit/ensure_docdb_clusters_encrypted_in_transit_rule.py",
        "rule_name": "Ensure DocDB clusters are set to encrypt the connection with applications",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/security.encryption.ssl.html> to enable encryption in transit.",
        "policy_id": null,
        "rule_id": "not_car_docdb_cluster_encrypted_in_transit",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the DocDB clusters being created in your environment. If a cluster is not set to encrypt at rest using a customer-managed CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "0bec0060-1fbd-4089-a4f4-8a4dbe220f64",
        "rule_logic": "Cloudrail will identify all DocumentDB clusters in the Terraform plan that are going to be created and are not configured to encrypt data at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_docdb_cluster resource, set the argument storage_encrypted to true and set the argument kms_key_id to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_docdb_clusters_encrypted_customer_managed_cmk_rule.py",
        "rule_name": "Ensure DocDB clusters being created are set to be encrypted at rest using customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/encryption-at-rest.html> to enable encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "not_car_docdb_cluster_encrypted_at_rest_using_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the EFS filesystems being created in your environment. If a filesystem is not set to encrypt at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "71d48284-0660-4354-aa69-39ecfa965379",
        "rule_logic": "Cloudrail will identify all EFS filesystems in the Terraform plan that are going to be created and are not configured to be encrypted at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_efs_file_system resource, set encrypted argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_efs_filesystems_encrypted_at_rest_rule.py",
        "rule_name": "Ensure EFS filesystems being created are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/efs/latest/ug/encryption-at-rest.html> to enable encryption at rest for EFS filesystems.",
        "policy_id": null,
        "rule_id": "non_car_efs_filesystem_encrypt_at_rest_creating",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "It is best to use TLS v1.2 in all encrypted HTTP communications. By default, the API gateway will support TLS v1.0 and v1.1, which should be disabled. If an API Gateway is not set to allow only TLS v1.2, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e8bd86ba-af0b-4189-861e-b6c37fa28af8",
        "rule_logic": "Cloudrail will identify all API Gateways within your AWS account and Terraform plan that have a domain configured and allowing TLS v1.0 or v1.1.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_api_gateway_domain_name resource, set the argument security_policy argument to \"TLS_1_2\".",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/ensure_api_gw_use_modern_tls_rule.py",
        "rule_name": "Ensure API Gateway uses modern TLS",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html> to set a security policy that uses TLS v1.2.",
        "policy_id": null,
        "rule_id": "non_car_api_gateway_tls",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the CloudFront Distribution being created in your environment. If it is not using Field Level Encryption, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "09998ff7-56cc-43ec-9b13-adf83cdc325a",
        "rule_logic": "Cloudrail will identify all CloudFront distributions in the Terraform plan with cache behavior blocks not configured to perform field-level encryption.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudfront_distribution resource, in default_cache_behavior (and/or ordered_cache_behavior) block, set the field_level_encryption_id argument to the Field Level encryption configuration ID.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_in_transit/ensure_cloudfront_distribution_field_level_encryption_rule.py",
        "rule_name": "Ensure CloudFront Distribution being created are set to perform field-level encryption",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html> to enable field-level encryption.",
        "policy_id": null,
        "rule_id": "non_car_cloudfront_distribution_field_level_encryption_creating",
        "severity": "low"
    },
    {
        "resource_types": [
            "streaming"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Kinesis streams in your environment. If a stream is not set to encrypt at rest, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "04bd372f-035f-40b1-b489-d82650162432",
        "rule_logic": "Cloudrail will identify all Kinesis streams within your AWS account and Terraform plan that are not configured to be encrypted at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_kinesis_stream resource, set the encryption_type argument to \"KMS\" and set kms_key_id argument.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_kinesis_stream_encrypted_at_rest_rule.py",
        "rule_name": "Ensure Kinesis streams are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/streams/latest/dev/getting-started-with-sse.html> to enable encryption for Kinesis streams.",
        "policy_id": null,
        "rule_id": "non_car_kinesis_stream_encrypt_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the X-Ray encryption config in your environment. If the encryption config is not set to encrypt at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "2af00756-ecc9-4499-b97c-c94265a3f76c",
        "rule_logic": "Cloudrail will identify X-Ray encryption config within your AWS account and Terraform plan that is not configured to encrypt at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_xray_encryption_config resource, set the argument type to \"KMS\" and set key_id argument to a customer-managed CMK ARN.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_xray_encryption_using_customer_cmk_rule.py",
        "rule_name": "Ensure X-Ray encryption config is set to encrypt at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/xray/latest/devguide/xray-console-encryption.html> to enable encryption using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_xray_encryption_config_encrypt_at_rest_with_customer_managed_CMK",
        "severity": "low"
    },
    {
        "resource_types": [
            "streaming"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Kinesis firehose delivery stream in your environment. If a stream is not set to encrypt at rest, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "627c89cb-4532-427b-9250-2cd91f88768c",
        "rule_logic": "Cloudrail will identify all Kinesis Firehose delivery streams within your AWS account and Terraform plan that are not configured to be encrypted at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_kinesis_firehose_delivery_stream resource, in server_side_encryption block, set the enable argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_kinesis_firehose_stream_encypted_at_rest_rule.py",
        "rule_name": "Ensure Kinesis Firehose delivery stream are set to be encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/firehose/latest/dev/create-configure.html> to enable encryption for Kinesis Data Firehose.",
        "policy_id": null,
        "rule_id": "non_car_kinesis_firehose_delivery_stream_encrypt_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Workspaces being created in your environment. If a workspace is not set to encrypt root volume at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "2a8ba3d5-6eef-4ca0-a3c3-e27efac2ffac",
        "rule_logic": "Cloudrail will identify all Workspaces in the Terraform plan that are going to be created and are not configured to encrypt root volume at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_workspaces_workspace resource, set the root_volume_encryption_enabled argument to true and set a KMS key in volume_encryption_key argument.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_workspace_root_volume_encrypted_at_rest_rule.py",
        "rule_name": "Ensure Workspaces being created are set to encrypt root volume at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html> to encrypt root volumes of Workspaces.",
        "policy_id": null,
        "rule_id": "non_car_workspace_root_volume_encrypt_at_rest_creating",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Workspaces being created in your environment. If a workspace is not set to encrypt root volume at rest using a customer-managed CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "515111e2-98bd-4c84-ac00-93107cdf91f1",
        "rule_logic": "Cloudrail will identify all Workspaces in the Terraform plan that are going to be created and are not configured to encrypt root volume at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_workspaces_workspace resource, set the root_volume_encryption_enabled argument to true and set the volume_encryption_key argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_workspace_root_volume_encrypted_with_customer_cmk_rule.py",
        "rule_name": "Ensure Workspaces being created are set to encrypt root volume at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html> to encrypt root volumes of Workspaces using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_workspace_root_volume_encrypt_at_rest_with_customer_managed_CMK_creating",
        "severity": "low"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Workspaces being created in your environment. If a workspace is not set to encrypt user volume at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "4da65a82-a809-4722-af6a-8f88bea6f02f",
        "rule_logic": "Cloudrail will identify all Workspaces in the Terraform plan that are going to be created and are not configured to encrypt user volume at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_workspaces_workspace resource, set the user_volume_encryption_enabled argument to true and set a KMS key in volume_encryption_key argument.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_workspace_user_volume_encrypted_at_rest_rule.py",
        "rule_name": "Ensure Workspaces being created are set to encrypt user volume at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html> to encrypt user volumes of Workspaces.",
        "policy_id": null,
        "rule_id": "non_car_workspace_user_volume_encrypt_at_rest_creating",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Workspaces being created in your environment. If a workspace is not set to encrypt user volume at rest using a customer-managed CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a356a10c-fcac-4e57-b3f9-82fa15ab59f8",
        "rule_logic": "Cloudrail will identify all Workspaces in the Terraform plan that are going to be created and are not configured to encrypt user volume at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_workspaces_workspace resource, set user_volume_encryption_enabled argument to true and set volume_encryption_key argument to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_workspace_user_volume_encrypted_with_customer_cmk_rule.py",
        "rule_name": "Ensure Workspaces being created are set to encrypt user volume at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html#encrypt_workspace> to enable user volume encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_workspace_user_volume_encrypt_at_rest_with_customer_managed_cmk_creating",
        "severity": "low"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your AWS account password policy. If your policy password expire setting is greater than 90 days this rule will trigger. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "14ab7289-134d-4d7e-b23a-e5cabd1a82b3",
        "rule_logic": "Cloudrail will review your AWS account password policy. This rule checks to ensure your password policy has a maximum age set This rule will only run if there is at least one user defined with direct console access (not via SSO).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_account_password_policy resource, set the max_password_age argument to 90.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_account_pass_policy/iam_account_pass_policy_rules.py",
        "rule_name": "Ensure your account password policy expires passwords within 90 days or less",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "8.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy> to require a password expiration of 90 days or less.",
        "policy_id": null,
        "rule_id": "non_car_aws_iam_password_policy_expiry",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your AWS account password policy. If your accounts password policy allows for passwords under 14 characters, this rule will trigger. This rule will only flag a violation for resources that are not yet created.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "61c4bcd4-9155-48ea-aa26-5f1daa08c6f8",
        "rule_logic": "Cloudrail will review your AWS account password policy. This rule checks to ensure your password policy is at least 14 characters in length (longer preferred). This rule will only run if there is at least one user defined with direct console access (not via SSO).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_account_password_policy resource, set the minimum_password_length argument to at least 14.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_account_pass_policy/iam_account_pass_policy_rules.py",
        "rule_name": "Ensure the IAM password password policy requires a password of at least 14 characters in length",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "1.8"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "8.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy> to require a Password minimum length of at least 14 characters.",
        "policy_id": null,
        "rule_id": "non_car_aws_iam_password_policy_min_length",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your AWS account password policy. If your account password policy does not enforce at least one lowercase letter this violation will trigger.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "18628ecc-be7a-4a77-a5a0-0bb3c367d826",
        "rule_logic": "Cloudrail will review your AWS account password policy. If you do not require lowercase characters this rule will trigger. This rule will only run if there is at least one user defined with direct console access (not via SSO).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_account_password_policy resource, set the require_lowercase_characters argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_account_pass_policy/iam_account_pass_policy_rules.py",
        "rule_name": "Ensure the IAM password policy requires at least one lowercase letter",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "8.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy> to require at least one lowercase letter.",
        "policy_id": null,
        "rule_id": "non_car_aws_iam_password_policy_lower_required",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your AWS account password policy. If your account password policy does not enforce at least one number this violation will trigger.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "893b5d22-9203-4b14-a9be-6f71952e5d69",
        "rule_logic": "Cloudrail will review your AWS account password policy. If you do not require numbers in this password policy This rule will only run if there is at least one user defined with direct console access (not via SSO).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_account_password_policy resource, set the require_numbers argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_account_pass_policy/iam_account_pass_policy_rules.py",
        "rule_name": "Ensure IAM password policy requires at least one number",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "8.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy> to require at least one number.",
        "policy_id": null,
        "rule_id": "non_car_aws_iam_password_policy_num_required",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your AWS account password policy. If your account password policy allows users to re-use their previous password this rule will trigger.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "52bf8dd6-583f-494f-a1b6-0612daca56f6",
        "rule_logic": "Cloudrail will review your AWS account password policy. AWS allows you to set a password reuse prevention between 1-24 This rule will only run if there is at least one user defined with direct console access (not via SSO).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_account_password_policy resource, set the password_reuse_prevention argument to 24.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_account_pass_policy/iam_account_pass_policy_rules.py",
        "rule_name": "Ensure IAM password policy does not allow password re-use",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "1.9"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "8.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy> to set Prevent password reuse to 24.",
        "policy_id": null,
        "rule_id": "non_car_aws_iam_password_policy_password_reuse",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your AWS account password policy. If your account password policy does not enforce at least one symbol, violation will be triggered.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "1fadfb00-1b30-409d-9b62-c1d30c6e2296",
        "rule_logic": "Cloudrail will review your AWS account password policy. If the policy does not require the use of symbols this rule will trigger. This rule will only run if there is at least one user defined with direct console access (not via SSO).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_account_password_policy resource, set the require_symbols argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_account_pass_policy/iam_account_pass_policy_rules.py",
        "rule_name": "Ensure the IAM password policy requires at least one symbol",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "8.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy> to set a proper password policy.",
        "policy_id": null,
        "rule_id": "non_car_aws_iam_password_policy_symbol_required",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review your AWS account password policy. If your account password policy does not enforce at least one upper case letter this violation will trigger.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "85b75c45-9aa6-46ed-a275-38348dd201e8",
        "rule_logic": "Cloudrail will review your AWS account password policy. If the policy does not require the use of uppercase characters this rule will trigger. This rule will only run if there is at least one user defined with direct console access (not via SSO).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_iam_account_password_policy resource, set the require_uppercase_characters argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_account_pass_policy/iam_account_pass_policy_rules.py",
        "rule_name": "Ensure IAM password policy requires at least one uppercase letter",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "8.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy> to set a proper password policy.",
        "policy_id": null,
        "rule_id": "non_car_aws_iam_password_policy_upper_required",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "storage",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Access to objects in S3 should only be done via HTTPS. Blocking HTTP can be done by including a SecureTransport condition in the S3 bucket\u2019s policy.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "3010a412-3c41-4ffd-b561-5ac5b4cbd473",
        "rule_logic": "For each S3 bucket, Cloudrail will look at the policy. If a policy is missing, or there is one but there\u2019s no denial of insecure traffic (aws:SecureTransport == false), a violation will be highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket_policy resource, ensure the policy denies all actions on the bucket and objects when the request meets the condition (aws:SecureTransport == false).",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/ensure_s3_bucket_policy_use_https_rule.py",
        "rule_name": "Enforce use of HTTPS in S3 bucket policy",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "2.1.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-policy-for-config-rule/> to create an S3 bucket policy that enforces the use of HTTPS.",
        "policy_id": null,
        "rule_id": "non_car_s3_bucket_policy_secure_transport",
        "severity": "medium"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Having a retention policy on CloudWatch groups is advisable to make sure logs are kept for as long as needed, but not longer. Cloudrail will identify if a retention policy is not set.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "cdfb2ae1-8f74-44da-8e98-2b9d0aa44c80",
        "rule_logic": "Cloudrail will identify all cloudwatch log groups in your AWS account and Terraform plan. For each one, we will look to see if there \u201cretentionInDays\u201d key exists in each of the responses. If this key does not exist, that means there is no retention policy set. This would allow logs to be delivered and stored in this log group forever.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudwatch_log_group resource, set the retention_in_days argument to the number of days you want to retain log events.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_cloudwatch_log_groups_specify_retention_days_rule.py",
        "rule_name": "Ensure CloudWatch log groups have a retention policy",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html> to set a log data retention policy.",
        "policy_id": null,
        "rule_id": "non_car_cw_log_group_no_retention",
        "severity": "low"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Log validation is important for CloudTrail trails to make sure logs are not invalid nor tampered with. Cloudrail will identify if log validation is not set.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "95d55a82-fa69-4b15-a2f7-f2d6a3427d42",
        "rule_logic": "Cloudrail will identify all cloudtrail trails within your AWS account. If we detect a trail, we will look to see if log validation is set on the trail, if there is no validation enabled, this rule will fire.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudtrail resource, set the enable_log_file_validation argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_cloudtrail_log_validation_enabled_rule.py",
        "rule_name": "Ensure CloudTrail trails have log validation enabled",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "3.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "10.5"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html> to enable log file integrity validation.",
        "policy_id": null,
        "rule_id": "non_car_aws_cloudtrail_log_validation_disabled",
        "severity": "low"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Exposing resources to the Internet is generally inadvisable, especially to all ports range",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5ca2d029-6880-4b84-a9c2-b4cf62cf80a6",
        "rule_logic": "Cloudrail will identify all security groups in use. For each one, it will determine if all ports range are exposed to 0.0.0.0/0. Then, it will identify where the security group is in use. If it's not in use, the security group will be ignored. For each resource the security group is used with, Cloudrail will determine the subnet it is located in. It will then review the routing table to verify that the subnet is accessible from the Internet, and that the NACL associated with the subnet has all ports opened. This ensures the security group is only flagged if there's a real exposure.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_security_group resource, modify in-line rules or the associated aws_security_group_rule resources to restrict traffic to specific ports. Additionally, for the aws_network_acl resource, modify in-line rules or the associated aws_network_acl_rule resources to restrict traffic to specific ports.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_security_groups_port_rule.py",
        "rule_name": "Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to all ports",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "5.2"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules> to update security groups rules and restrict traffic to specific ports. Additionally, follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#Rules> to update NACLs rules to restrict traffic to specific ports also.",
        "policy_id": null,
        "rule_id": "public_access_security_groups_all_ports_rule",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Using wildcard actions may inadvertently allow users to take actions you do not want to allow them to do. It is a best practice to give specific permissions only.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5ef02a5e-3318-4c23-a19a-72a0c4ff17de",
        "rule_logic": "Cloudrail will review the Lambda function policies being created in your environment or currently in use. If a policy is using wildcard actions, Cloudrail will highlight it as a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_lambda_permission resource, modify policy argument in order to avoid using wildcard actions.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/policy_wildcard_violation/ensure_policy_not_use_wildcard_actions_rules.py",
        "rule_name": "Ensure use of Lambda function policy, and no action wildcards are being used",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html> to modify Lambda function policy in order to avoid using wildcard actions.",
        "policy_id": null,
        "rule_id": "non_car_aws_lambda_func_policy_wildcard",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Some 3rd party vendors may ask for the ReadOnlyAccess policy to be granted. This is now considered a dangerous policy, giving vendors access to confidential S3 bucket contents, secrets, and other sensitive items. This policy should be avoided and Cloudrail will flag its use as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e571af68-42ef-4422-aa3f-1391cd19243b",
        "rule_logic": "For each IAM entity, check if it is assigned the ReadOnlyAccess policy. Only look at IAM entities that are either a user with credentials (console login or access keys) or a role with a trust policy (meaning - someone can assume the role). This means you ignore users that no one can login as, or roles that are only internal to the account (can be used by EC2 for example).",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For role: review the aws_iam_role_policy_attachment and switch to a policy that is more restrictive. For user: review aws_iam_user_policy_attachment, and for a group aws_iam_group_policy_attachment.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_no_read_only_access_policy_used_by_role_user_rule.py",
        "rule_name": "Ensure ReadOnlyAccess policy is not being used by users who can login or roles that can be assumed",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Find the specific user, group or role in the IAM tab and change the policies assigned to it. Choose a more restrictive policy or create a custom one.",
        "policy_id": null,
        "rule_id": "non_car_iam_readonlyaccess_policy",
        "severity": "major"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "When defining a new IAM entity in infrastructure-as-code (such as Terraform), and assigning policies to it in the same set of code, a user has the expectation that no other policies will be assigned to the same entity through other means. For example, a user\u2019s expectation is that no one will assign an additional policy to the same entity through the AWS console. This rule allows you to ensure that indeed, policy assignment to an IAM entity created in infrastructure-as-code is only done via infrastructure-as-code, and not external means. Thereby ensuring that the IAM entity only has the permissions declared for it in the code.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "e46f715b-0e6a-4a06-ac9a-132f3ab45cbb",
        "rule_logic": "Cloudrail will review all IAM entities (role, user, group) created through Terraform and that have at least one policy attached via the Terraform code. For each entity, it will determine if there are additional policies attached to it, not through the Terraform code. For example, a policy attachment done in the AWS console directly. If such a case occurs, a violation will be flagged.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Consider updating the code to reflect the policy attachments that were not originally done through the Terraform code. Adding the needed aws_iam_<user|role|group>_policy_attachment resources that are missing would resolve this.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/ensure_iam_entities_policy_managed_solely_rule.py",
        "rule_name": "Ensure IAM entities policies are managed solely in infrastructure-as-code",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Find the IAM entity within the AWS console and remove any policies attached that were not added originally through the infrastructure-as-code.",
        "policy_id": null,
        "rule_id": "car_iam_policy_control_in_iac_only",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Databases should not be publicly accessible. If a database is serving content to be consumed by external users, it's best to go through an API gateway or some other control point.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "20d1b794-9cc3-4df7-878e-cdf5217a0e58",
        "rule_logic": "Cloudrail will review all of the Neptune databases configured in your environment. For each database, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the database can be accessed from the Internet. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only databases which can truly be accessed from the Internet are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_neptune_cluster resource, set vpc_security_group_ids or cluster_security_groups arguments to use a Security Group that blocks traffic from publicly-accessible AWS resources.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_db_neptune_rule.py",
        "rule_name": "Ensure Neptune database is not publicly accessible",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/security-vpc-security-group.html> to modify Neptune database Security Groups to block traffic from publicly-accessible AWS resources.",
        "policy_id": null,
        "rule_id": "public_access_db_neptune",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the ECS task definitions being created in your environment. If a task definition is not set to encrypt in transit with EFS volumes, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f314fdba-f473-489b-b4fd-c4600754d26e",
        "rule_logic": "Cloudrail will identify all ECS task definitions in the Terraform plan. It will check if the task definition is using an EFS volume, and if so, it will check if it is enabled to perform encryption in transit.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ecs_task_definition resource, in volume, efs_volume_configuration block, set transit_encryption argument to ENABLED.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_in_transit/ensure_ecs_task_definition_created_with_efs_encrypt_in_transit_rule.py",
        "rule_name": "Ensure ECS task definitions being created are set to encrypt in transit with EFS volumes",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "4.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html> to enable encryption for Amazon EFS data in transit between ECS host and EFS server.",
        "policy_id": null,
        "rule_id": "non_car_ecs_task_definition_encrypt_in_transit_with_EFS",
        "severity": "medium"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "By default, Lambda functions have log groups created for them (either explicitly by the user, or by AWS). It\u2019s important to set a retention period on logs, and not use the default of AWS.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f765546a-b521-4f88-b403-667a683e0e8d",
        "rule_logic": "Cloudrail will look through all Lambda functions in both AWS and Terraform. For each function, it will try to find a matching log group, or will assume AWS will create one automatically if a specific one is not provided. It will then review the matching log group\u2019s retention settings.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Update the retention_in_days field in the aws_cloudwatch_log_group resource. If you haven't specified one explicitly, create an aws_cloudwatch_log_group resource for the Lambda function as part of the Terraform code.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_lambda_function_has_non_infinite_log_retention_rule.py",
        "rule_name": "Ensure each Lambda function has a non-infinite log retention",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Find the specific log group for the Lambda function, and change its retention by following <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#SettingLogRetention>.",
        "policy_id": null,
        "rule_id": "non_car_lambda_logging_not_infinite",
        "severity": "low"
    },
    {
        "resource_types": [
            "key_mgmt"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the SSM Parameter Store SecureString parameters in your environment. If a SecureString is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation. Cloudrail DOES NOT access the contents of the secrets themselves.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a4d2c862-1a3d-449b-a76d-beaf9715219b",
        "rule_logic": "Cloudrail will identify SSM Parameter Store SecureString parameters secrets within your AWS account and Terraform plan that are not configured to be encrypted at rest using a customer-managed CMK. Cloudrail DOES NOT access the secret\u2019s contents themselves.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ssm_parameter resource, set key_id argument to a customer-managed CMK ARN.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_ssm_parameter_store_using_encrypted_customer_managed_kms_rule.py",
        "rule_name": "Ensure SSM Parameter Store SecureString strings are encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-create-console.html> to provide a customer-managed CMK ARN for the SecureString parameter.",
        "policy_id": null,
        "rule_id": "non_car_ssm_parameter_store_securestring_encrypted_at_rest_with_customer_managed_CMK",
        "severity": "low"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Sagemaker Endpoint Configurations being created in your environment. If a configuration is not set to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "4ee2bbe8-8081-4dfd-aee2-296a162895cb",
        "rule_logic": "Cloudrail will identify all Sagemaker Endpoint Configurations in the Terraform plan that are going to be created and are not configured to encrypt data at rest.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_sagemaker_endpoint_configuration resource, set a key in kms_key_id argument.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_sagemaker_endpoint_config_encrypted_at_rest_rule.py",
        "rule_name": "Ensure Sagemaker endpoint configurations being created are set to be encrypted data at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "In Amazon Sagemaker, Inference, Endpoint configurations, set \u201cEncryption key\u201d to use a key.",
        "policy_id": null,
        "rule_id": "not_car_sagemaker_endpoint_configurations_encrypt_data_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Sagemaker Notebook instances being created in your environment. If an instance is not set to encrypt artifacts at rest using customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "387b9beb-17cf-4314-8cfc-affaf4aa3d19",
        "rule_logic": "Cloudrail will identify all Sagemaker Notebook instances in the Terraform plan that are going to be created and are not configured to encrypt artifacts at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_sagemaker_notebook_instance resource, set kms_key_id argument to a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_sagemaker_notebook_instance_encrypted_by_cmk.py",
        "rule_name": "Ensure Sagemaker Notebook instances being created are set to encrypt artifacts at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/sagemaker/latest/dg/howitworks-create-ws.html> to enable encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "not_car_sagemaker_notebook_instances_encrypt_artifacts_at_rest_with_customer_managed_CMK_creating",
        "severity": "low"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "When a role is created, a \"trust policy\" is used to declare who can assume the role. The principal of the trust policy must be specific, and not use the \"*\" value.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "86175ee5-e40b-468a-b220-89758255723d",
        "rule_logic": "Cloudrail will review all IAM roles in the account. For each one, it will look at the assume role policy to determine if any of the principals are too wide. If a wide principal is found (like \"*\"), without any conditions, the role will be flagged.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Edit the assume_role_policy under the aws_iam_role, and either make the Principal more specific or add the use of a condition in the policy.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/iam_role_assume_role_principal_too_wide.py",
        "rule_name": "Ensure no role uses an overly wide principal for assume role policy",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow AWS's guidance on how to write secure IAM role trust policies: <https://aws.amazon.com/blogs/security/how-to-use-trust-policies-with-iam-roles/> iac_remediation_steps: For the aws_sagemaker_endpoint_configuration resource, set kms_key_id argument to a Key ARN.",
        "policy_id": null,
        "rule_id": "non_car_iam_role_assume_role_principal_too_wide",
        "severity": "major"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Excess of permissions in a Lambda Function can lead to inadvertently exposed resources such as S3 buckets. Best practices suggest use of least privileges - listing specific S3 buckets the Lambda Function is allowed to access. The Execution Role must be least privilege as an attacker can potentially access other S3 buckets if the application is exploited.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "1d1ff945-13a4-4657-b315-c01d1165a046",
        "rule_logic": "Cloudrail will check if there is an API Gateway that's publicly accesible, if so it will also check for the existence of Lambda Functions that can be invoked by any of those API Gateways and if there is any it will check the execution role in the Lambda Function to verify if access to S3 is not limited to certain buckets, Cloudrail will also consider the bucket policy to flag only those buckets that can be accessed by the Lambda Function.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Locate the aws_iam_policy resource associated to execution role of the Lambda Function and set the actions and resources to the minimum possible, avoiding the use of wildcards.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/indirect_public_access_rules/s3_bucket_lambda_indirect_exposure_rule.py",
        "rule_name": "S3 Bucket is exposed via an overly permissive Lambda Execution Role",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Limit the actions and resources in the execution role policy of Lambda Function to the minimum possible, avoiding the use of wildcards.",
        "policy_id": null,
        "rule_id": "s3_lambda_indirect_exposure",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "context_aware",
        "rule_description": "Databases should not be publicly accessible. If a database is serving content to be consumed by external users, it's best to go through an API gateway or some other control point.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "b0419711-f8f0-4e10-bf1d-66a99fa78c5c",
        "rule_logic": "Cloudrail will review all of the DMS Replication instances configured in your environment. For each instance, it will review the security groups in use (where VPC or not), the subnets in use, the public IP configured (on or off) and other aspects. It will then attempt to determine if the instance can be accessed from the Internet. This determination will take into account the security groups, subnet information, routing and other information, instead of relying solely on the existence of a public IP address. By doing this context-based analysis, Cloudrail ensures that only instances which can truly be accessed from the Internet are highlighted.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the dms_replication_instance resource, set vpc_security_group_ids argument to use a Security Group that blocks traffic from publicly-accessible AWS resources.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/context_aware/public_access_validation_rules/public_access_dms_replication_instance_rule.py",
        "rule_name": "Ensure DMS Replication instance is not publicly accessible",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html>, under the section \"Network security for AWS Database Migration Service\" to modify DMS Replication instances Security Groups to block traffic from publicly-accessible AWS resources.",
        "policy_id": null,
        "rule_id": "public_access_dms_replication_instance",
        "severity": "major"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will send all of your IAM policies to the AWS Access Analyzer for Policy Validation. Any issues found by Access Analyzer at the WARNING and SUGGESTION severities will be highlighted as issues by Cloudrail under this rule.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5bc88c49-558c-43fe-b750-90d1039b2494",
        "rule_logic": "Cloudrail will send all of your IAM policies to the AWS Access Analyzer for Policy Validation. Any issues found by Access Analyzer at the WARNING and SUGGESTION severities will be highlighted as issues by Cloudrail under this rule.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Review the findings and correct them within the policy.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/access_analyzer_rules/access_analyzer_validation_warning_and_suggestion_rule.py",
        "rule_name": "Ensure IAM policies pass Access Analyzer policy validation without WARNING and SUGGESTION issues",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Review the findings and correct them within the policy.",
        "policy_id": null,
        "rule_id": "not_car_access_analyzer_validation_warning_and_suggestion",
        "severity": "low"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will send all of your IAM policies to the AWS Access Analyzer for Policy Validation. Any issues found by Access Analyzer at the SECURITY and ERROR severities will be highlighted as issues by Cloudrail under this rule.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d48e93e3-8461-45e0-953d-7c833e4487c6",
        "rule_logic": "Cloudrail will send all of your IAM policies to the AWS Access Analyzer for Policy Validation. Any issues found by Access Analyzer at the SECURITY and ERROR severities will be highlighted as issues by Cloudrail under this rule.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Review the findings and correct them within the policy.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/access_analyzer_rules/access_analyzer_validation_error_and_security_rule.py",
        "rule_name": "Ensure IAM policies pass Access Analyzer policy validation without SECURITY and ERROR issues",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Review the findings and correct them within the policy.",
        "policy_id": null,
        "rule_id": "not_car_access_analyzer_validation_error_and_security",
        "severity": "major"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Sagemaker Notebook instances in your environment. If an instance uses direct internet access, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "8e77be8a-d0e3-4edb-ad35-c47a1c79424a",
        "rule_logic": "Cloudrail will identify all Sagemaker Notebook instances which use direct internet access.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_sagemaker_notebook_instance resource, set direct_internet_access argument to \"Disabled\", and add subnet_id and security_groups arguments for the resource.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_no_direct_internet_access_allowed_to_sagemaker_notebook_instance_rule.py",
        "rule_name": "Ensure no direct internet access is allowed from Sagemaker Notebook instances",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-notebook-and-internet-access.html> to configure your instance with some VPC, and disable the \"direct internet access\" option while creating the Sagemaker Notebook instance.",
        "policy_id": null,
        "rule_id": "non_car_no_direct_internet_access_allowed_from_sagemaker_notebook_instance_rule",
        "severity": "medium"
    },
    {
        "resource_types": [
            "iam"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Roles should be maintained carefully, in order to provide access for desired entities. Having unused Roles may leave open a door to bad actors.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "9b7fb56e-9650-4056-a40b-2a3453348fbb",
        "rule_logic": "Cloudrail will review all of the IAM Roles in your environment. It will utilize AWS's role usage tracking to determine when the role was used last. If it wasn't used in over 90 days, or was created over 90 days ago and never used, Cloudrail will highlight a violation.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Remove the unused aws_iam_role resource from your TF template.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_unused_roles_removed_rule.py",
        "rule_name": "Ensure unused roles are removed",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "8.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Delete the unusued IAM Roles from your AWS Console.",
        "policy_id": null,
        "rule_id": "non_car_unused_roles",
        "severity": "medium"
    },
    {
        "resource_types": [
            "code"
        ],
        "is_custom": false,
        "security_layer": "storage",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the ECR repositories configuration in your environment. If a repository is not configured to scan images on push, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c8d3644c-816d-4b06-99e1-3fe68511cb11",
        "rule_logic": "Cloudrail will review the ECR repositories configuration within your AWS account and Terraform plan to check if image scanning on push is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ecr_repository resource, in the image_scanning_configuration block, set the scan_on_push parameter to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_ecr_image_scanning_on_push_enabled_rule.py",
        "rule_name": "Ensure ECR image scanning on push is enabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html> to configure image scanning on push for an ECR repository.",
        "policy_id": null,
        "rule_id": "non_car_ecr_image_scanning_on_push_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "code"
        ],
        "is_custom": false,
        "security_layer": "storage",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the ECR repositories configuration in your environment. If a repository is not configured with immutable tags, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "fac0ccb0-3efe-40f6-807d-1f4352def8bd",
        "rule_logic": "Cloudrail will review the ECR repositories configuration within your AWS account and Terraform plan to check if image tags are set to immutable.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ecr_repository resource, set the image_tag_mutability parameter to \"IMMUTABLE\".",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_ecr_repository_image_tags_immutable_rule.py",
        "rule_name": "Ensure ECR repository image tags are immutable",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html> in order to configure Tag immutability for an ECR repository.",
        "policy_id": null,
        "rule_id": "non_car_ecr_image_tags_immutable",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "disaster_recovery",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the ElastiCache Redis clusters configuration in your environment. If a Redis cluster has automatic backup turned off, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "7cd3e44a-a618-49b0-a708-597d8afdcb71",
        "rule_logic": "Cloudrail will review the ElastiCache Redis clusters within your AWS account and Terraform plan to check if if they have automatic backup turned on.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticache_cluster resource, set the snapshot_retention_limit argument to a value higher than 0.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_elasticache_redis_cluster_auto_backup_enabled_rule.py",
        "rule_name": "Ensure ElastiCache Redis clusters have automatic backup turned on",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-automatic.html> in order to enable automatic backups for a ElastiCache Redis cluster.",
        "policy_id": null,
        "rule_id": "non_car_elasticache_redis_cluster_automatic_backup_turned_on",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the ECR repositories being created in your environment. If a repository is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a3408697-6b1a-4eb8-998a-cf3cd3748418",
        "rule_logic": "Cloudrail will identify all ECR repositories in the Terraform plan that are going to be created and are not configured to be encrypted at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ecr_repository resource, set kms_key argument, in encryption_configuration block, to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_ecr_repositories_encrypt_at_rest_with_customer_cmk_rule.py",
        "rule_name": "Ensure ECR repositories being created are set to be encrypted at rest using customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html> to create an ECR repository with encryption at rest using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_ecr_repositories_encrypted_at_rest_with_customer_managed_cmk",
        "severity": "low"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the CloudFront distributions in your environment. If a distribution is not using AWS WAF, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d1776264-a3a2-4a0f-a02f-377e345d9765",
        "rule_logic": "Cloudrail will review the CloudFront distributions within your AWS account and Terraform plan to check if they are configured to use WAF.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudfront_distribution resource, set the web_acl_id parameter to a WAF Web ACL ARN value.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/ensure_cloudfront_distribution_list_using_waf_rule.py",
        "rule_name": "Ensure CloudFront distribution is using WAF",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-awswaf.html> in order to assign an AWS WAF Web ACL to the CloudFront distribution.",
        "policy_id": null,
        "rule_id": "non_car_cloudfront_distribution_using_waf",
        "severity": "medium"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "networking",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Load Balancers in your environment. If a Load Balancer is not set drop invalid HTTP headers, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "c724f8c6-7d1a-491b-9b4d-cdea04957b47",
        "rule_logic": "Cloudrail will review the Load Balancers within your AWS account and Terraform plan to check if they are configured to drop invalid HTTP headers.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_lb resource, set the drop_invalid_header_fields parameter to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/protocol_enforcments/ensure_load_balancer_drops_invalid_http_headers_rule.py",
        "rule_name": "Ensure Load Balancer drops invalid HTTP headers",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html> to enable the Drop invalid header fields parameter.",
        "policy_id": null,
        "rule_id": "non_car_alb_drops_invalid_http_headers",
        "severity": "medium"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the CloudTrail configuration in your environment. If it is not enabled in all regions, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f73f1cd7-8087-41ed-b373-cf59a836824c",
        "rule_logic": "Cloudrail will review the CloudTrail configuration within your AWS account and Terraform plan to check if it is enabled in all regions.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudtrail resource, set is_multi_region_trail argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_cloudtrail_multiregion_enabled_rule.py",
        "rule_name": "Ensure CloudTrail is enabled in all regions",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "3.1"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "10.1",
                    "10.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html> to create a trail that logs events in all regions.",
        "policy_id": null,
        "rule_id": "non_car_cloudtrail_is_enabled_in_all_regions",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the DynamoDB tables in your environment. If a table is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "2dc1e570-15ef-47b0-a008-4fbbcdce74fa",
        "rule_logic": "Cloudrail will identify DynamoDB tables within your AWS account and Terraform plan that are not configured to be encrypted at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_dynamodb_table resource, set kms_key_arn argument, in server_side_encryption block, to use a customer-managed CMK.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_dynamodb_tables_encrypted_at_rest_with_customer_managed_cmk_rule.py",
        "rule_name": "Ensure DynamoDB tables are encrypted at rest with customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4",
                    "7.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html> to set DynamoDB table encryption using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_dynamodb_tables_encrypted_at_rest_with_customer_managed_CMK",
        "severity": "low"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the ECS clusters configuration in your environment. If a cluster is not configured to enable container insights, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "6de4f295-e432-44c0-ac29-fef98e96378a",
        "rule_logic": "Cloudrail will review the ECS clusters configuration within your AWS account and Terraform plan to check if container insights is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_ecs_cluster resource, in the setting block, set the name argument to containerInsights and the value argument to enabled.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_ecs_cluster_enable_container_insights_rule.py",
        "rule_name": "Ensure ECS cluster has container insights enabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-cluster.html> in order to enable container insights for an ECS cluster.",
        "policy_id": null,
        "rule_id": "non_car_ecs_cluster_container_insights_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "storage",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the EC2 instances configuration in your environment. If it is not configured to be EBS-optimized, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d3f1ad48-67bc-44d1-9f73-7f6cbd985a16",
        "rule_logic": "Cloudrail will review the EC2 instances configuration within your AWS account and Terraform plan to check if it is configured to be EBS optimized.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_instance resource, set the ebs_optimized parameter to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/performance_optimization/ensure_ec2_instance_ebs_optimized_rule.py",
        "rule_name": "Ensure EC2 instance is EBS optimized",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html> to enable EBS optimization for an EC2 instance.",
        "policy_id": null,
        "rule_id": "non_car_ec2_instance_is_ebs_optimized",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "disaster_recovery",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the RDS instances and clusters configuration in your environment. If an instance or cluster is not configured with a backup retention policy, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a267b1c5-451b-45d9-854e-14e7839f8376",
        "rule_logic": "Cloudrail will review the RDS instances and clusters within your AWS account and Terraform plan to check if if they have a backup retention policy.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_db_instance or aws_rds_cluster resource, set the backup_retention_period argument to a value higher than 0.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/backup_checks/ensure_rds_resource_backup_retention_enabled_rule.py",
        "rule_name": "Ensure RDS instances and clusters have a backup retention policy",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupRetention> in order to set the backup retention period to a positive nonzero value for RDS instances. Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html> in order to set the backup retention period to a positive nonzero value for RDS clusters.",
        "policy_id": null,
        "rule_id": "non_car_rds_instance_and_cluster_backup_retention_policy",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the API Gateway methods configuration in your environment. If a method is not configured to require authorization, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d2fa8004-6b61-42bd-8eed-0083b2867ccc",
        "rule_logic": "Cloudrail will review the API Gateway methods configuration within your AWS account and Terraform plan to check if authorization has been enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_api_gateway_method resource, set the authorization argument to a value other than \u201cNONE\u201d.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_rest_api_method_use_authentication_rule.py",
        "rule_name": "Ensure API Gateway methods use authentication",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-settings-method-request.html#setup-method-request-authorization> in order to configure the authorization type on the REST API methods.",
        "policy_id": null,
        "rule_id": "non_car_api_gateway_methods_use_authentication",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review RDS instances and clusters configuration in your environment. If IAM authentication is not enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "a9f8a17f-8b20-412c-9d10-062b2e63ed45",
        "rule_logic": "Cloudrail will review the configuration of RDS instances and clusters within your AWS account and Terraform plan to check if IAM authentication is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_db_instance or aws_rds_cluster resources, set the iam_database_authentication_enabled argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_rds_resource_has_iam_authentication_enabled_rule.py",
        "rule_name": "Ensure RDS database has IAM authentication enabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Enabling.html> in order to enable IAM database authentication for the RDS instance or cluster.",
        "policy_id": null,
        "rule_id": "non_car_rds_database_iam_authentication_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Config aggregator configuration in your environment. If it is not enabled in all regions, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "6cc6b27b-508d-4348-8996-8ccd48ed5bf2",
        "rule_logic": "Cloudrail will review the Config aggregator configuration within your AWS account and Terraform plan to check if it is enabled in all regions either at account level or at organization level.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_config_configuration_aggregator resource, in the account_aggregation_source or organization_aggregation_source blocks, set the all_regions parameter to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_config_aggregator_enabled_all_regions_rule.py",
        "rule_name": "Ensure Config aggregator is enabled in all regions",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/config/latest/developerguide/setup-aggregator-console.html> to enable Config aggregator in all regions.",
        "policy_id": null,
        "rule_id": "non_car_config_aggregator_is_enabled_in_all_regions",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review API Gateway stages configuration in your environment. If a stage is not configured to have X-Ray tracing enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "39efc173-63dd-460a-b9f8-182061efaf6b",
        "rule_logic": "Cloudrail will review the API Gateway stages configuration within your AWS account and Terraform plan to check X-Ray tracing is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_api_gateway_stage resource, set the xray_tracing_enabled argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_api_gw_xray_tracing_enabled_rule.py",
        "rule_name": "Ensure API Gateway has X-Ray tracing enabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enabling-xray.html> in order to enable X-Ray tracing for the API Gateway.",
        "policy_id": null,
        "rule_id": "non_car_api_gateway_xray_tracing_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the CloudFront distributions configuration in your environment. If a distribution has access logging disabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5be3e78d-f2d1-4b50-8178-8e8f8d532a60",
        "rule_logic": "Cloudrail will review the CloudFront distributions configuration within your AWS account and Terraform plan to check if access logging is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_cloudfront_distribution resource, configure the logging_config block with bucket argument set to the S3 bucket name for storing access logs.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_cloudfront_distribution_list_access_logging_enabled_rule.py",
        "rule_name": "Ensure CloudFront distribution has access logging enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html> in order to enabled access logs for the CloudFront distribution.",
        "policy_id": null,
        "rule_id": "non_car_cloudfront_distribution_access_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the DocDB clusters configuration in your environment. If a cluster is not configured to export logs to CloudWatch, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "8f0268d4-cc51-4cf0-a590-45fc58894e63",
        "rule_logic": "Cloudrail will review the DocDB clusters configuration within your AWS account and Terraform plan to check if logging is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_docdb_cluster resource, set the enabled_cloudwatch_logs_exports argument to a list containing the values \u201caudit\u201d and \u201cprofiler\u201d.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_docdb_logging_enabled_rule.py",
        "rule_name": "Ensure DocDB logging is enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html> in order to enable audit and profiler logs export to CloudWatch.",
        "policy_id": null,
        "rule_id": "non_car_docdb_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the EC2 instances configuration in your environment. If an instance does not have detailed monitoring configured, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "87d66b7b-dde6-4d13-81af-c9e7b403c2e7",
        "rule_logic": "Cloudrail will review the EC2 instances configuration within your AWS account and Terraform plan to check if detailed monitoring is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_instance resource, set the monitoring argument to true.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_ec2_instance_detailed_monitoring_enabled_rule.py",
        "rule_name": "Ensure EC2 instance has detailed monitoring enabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch-new.html> in order to enable detailed monitoring for an EC2 instance.",
        "policy_id": null,
        "rule_id": "non_car_ec2_instance_detailed_monitoring_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Elasticsearch Domains configuration in your environment. If a domain does not have logging enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "22bb34a0-9926-4498-9b02-d03832f6adeb",
        "rule_logic": "Cloudrail will review the Elasticsearch Domains configuration within your AWS account and Terraform plan to check if logging is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_elasticsearch_domain resource, set the log_publishing_options block with enabled argument set to true, log_type argument set to any of the valid values, and cloudwatch_log_group_arn argument set to the ARN of the CloudWatch Log Group.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_elasticsearch_domain_logging_enabled_rule.py",
        "rule_name": "Ensure Elasticsearch Domain has logging enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.1"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createdomain-configure-slow-logs.html> in order to configure log publishing for the Elasticsearch domain.",
        "policy_id": null,
        "rule_id": "non_car_elasticsearch_domain_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Elastic Load Balancers configuration in your environment. If a load balancer does not have logging enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "059a743b-f38f-4e68-b25e-0b2d568f2b04",
        "rule_logic": "Cloudrail will review the Elasticsearch Domains configuration within your AWS account and Terraform plan to check if logging is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_lb resource, set the access_logs block with enabled argument set to true and the bucket argument set to the S3 bucket name.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_load_balancer_logging_enabeld_rule.py",
        "rule_name": "Ensure ELB has logging enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html> or <https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html> in order to enable access logs for the load balancer.",
        "policy_id": null,
        "rule_id": "non_car_elb_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "network"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review Global Accelerator accelerators configuration in your environment. If an accelerator does not have flow logs enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "d55cdb9a-d17c-4f86-a45c-e8ab6c999f60",
        "rule_logic": "Cloudrail will review the configuration of Global Accelerator accelerators within your AWS account and Terraform plan to check if flow logs are enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_globalaccelerator_accelerator resource, set the attributes block with flow_logs_enabled argument set to true, flow_logs_s3_bucket argument set to the S3 bucket name, and flow_logs_s3_prefix argument to the prefix used for flow logs.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_global_acceleration_flow_logs_enabled_rule.py",
        "rule_name": "Ensure Global Accelerator accelerator has flow logs enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/global-accelerator/latest/dg/monitoring-global-accelerator.flow-logs.html> in order to enable flow logs for an accelerator.",
        "policy_id": null,
        "rule_id": "non_car_global_accelerator_flow_logs_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Lambda functions configuration in your environment. If a function does not have tracing in Active mode, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "bfa54953-a21a-46ba-9f74-3bb1ad4bfd41",
        "rule_logic": "Cloudrail will review the configuration of Lambda functions within your AWS account and Terraform plan to check if X-Ray tracing is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_lambda_function resource, set the tracing_config block with mode argument set to \u201cActive\u201d.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_lambda_function_xray_tracing_enabled_rule.py",
        "rule_name": "Ensure Lambda function has X-Ray tracing enabled",
        "compliance": {},
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/xray/latest/devguide/xray-services-lambda.html> in order to enable X-Ray tracing for a Lambda function.",
        "policy_id": null,
        "rule_id": "non_car_lambda_function_xray_tracing_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Neptune clusters configuration in your environment. If a cluster is not configured to export logs to Cloudwatch, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "3b9082d1-2ff7-482c-b94b-990908072901",
        "rule_logic": "Cloudrail will review the configuration of Neptune clusters within your AWS account and Terraform plan to check if Cloudwatch log export is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_neptune_cluster resource, set enable_cloudwatch_logs_exports argument to a list containing the element \u201caudit\u201d.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_neptune_cluster_logging_enabled_rule.py",
        "rule_name": "Ensure Neptune cluster has logging enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.2",
                    "10.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html> in order to enable log export to Cloudwatch for Neptune cluster.",
        "policy_id": null,
        "rule_id": "non_car_neptune_cluster_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the RDS instances and clusters configuration in your environment. If an instance or cluster is not configured to export logs to Cloudwatch, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "446f833c-24f5-4244-a041-6cb0851b9ddd",
        "rule_logic": "Cloudrail will review the configuration of RDS instances and clusters within your AWS account and Terraform plan to check if Cloudwatch log export is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_db_instance or aws_rds_cluster resource, set enabled_cloudwatch_logs_exports argument to a list containing at least one of the supported log types.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_rds_resource_logging_enabled_rule.py",
        "rule_name": "Ensure RDS instances and clusters have logging enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.2",
                    "10.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch> in order to enable log export to Cloudwatch for RDS instances and clusters.",
        "policy_id": null,
        "rule_id": "non_car_rds_instance_and_cluster_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Redshift clusters configuration in your environment. If a cluster does not have logging enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5f4bcf13-110a-4a1a-8465-ee39c7e6c658",
        "rule_logic": "Cloudrail will review the configuration of Redshift clusters within your AWS account and Terraform plan to check if logging is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_redshift_cluster resource, set the logging block with enable argument set to true and bucket_name argument to the S3 bucket name to store the logs.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_redshift_cluster_logging_enabled_rule.py",
        "rule_name": "Ensure Redshift clusters have logging enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.2",
                    "10.3"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html> in order to enable logging to an S3 bucket.",
        "policy_id": null,
        "rule_id": "non_car_redshift_cluster_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "content_delivery"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the REST API Gateways configuration in your environment. If a stage does not have access logging enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "f95e11b9-3317-44c3-a0b9-d6d4692053f9",
        "rule_logic": "Cloudrail will review the configuration of REST API Gateways within your AWS account and Terraform plan to check if logging is enabled for all stages.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_api_gateway_stage resource, set the access_log_settings block with destination_arn argument set to the ARN of a CloudWatch Log Group and set the format argument to a valid log format.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_rest_api_gw_access_logging_enabled_rule.py",
        "rule_name": "Ensure REST API Gateway has access logging enabled",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html> in order to enable logging for a REST API Gateway stage.",
        "policy_id": null,
        "rule_id": "non_car_rest_api_gateway_access_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the S3 buckets configuration in your environment. If a bucket does not have access logging enabled, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "5f405397-9bc4-4709-854c-e8472d6f1f72",
        "rule_logic": "Cloudrail will review the configuration of S3 buckets within your AWS account and Terraform plan to check if access logging is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_s3_bucket resource, set the logging block with target_bucket argument set to the name of an S3 bucket that will receive the log objects.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_s3_bucket_logging_enabled_rule.py",
        "rule_name": "Ensure S3 bucket has access logging enabled",
        "compliance": {
            "CIS": {
                "1.3.0": [
                    "3.6"
                ]
            },
            "PCI DSS": {
                "3.2.1": [
                    "10.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html> in order to enable server access logging for an S3 bucket.",
        "policy_id": null,
        "rule_id": "non_car_s3_bucket_access_logging_enabled",
        "severity": "medium"
    },
    {
        "resource_types": [
            "logging"
        ],
        "is_custom": false,
        "security_layer": "logging",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "It is critical to enable Cloudtrail and store it in a bucket for logging and incident response.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "84e59f7e-3636-4bef-aeaa-9d6756d21ef8",
        "rule_logic": "Cloudrail will ensure that there is at least one trail enabled in the account.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "Create terraform resource aws_cloudtrail and send logs to an S3 bucket.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/log_validation_rules/ensure_cloudtrail_trail_exists.py",
        "rule_name": "Ensure there is at least one trail enabled in Cloudtrail",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "10.1",
                    "10.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Go to Cloudtrail and in the Dashboard click on Create trail, make sure multi-region is enabled.",
        "policy_id": null,
        "rule_id": "ensure_cloudtrail_trail_exists",
        "severity": "major"
    },
    {
        "resource_types": [
            "database"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the Athena database configuration. If a database is not configured to be encrypted at rest, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "0ecef5de-3ded-4e02-a657-0e5f910d9af9",
        "rule_logic": "Cloudrail will review the Athena databases configuration in your Terraform plan to check if encryption at rest is enabled.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_athena_database resource, set the encryption_configuration block with the encryption_option argument set to either \u201cSSE_S3\u201d, \u201cSSE_KMS\u201d, or \u201cCSE_KMS\u201d.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/ensure_athena_database_encrypted_at_rest_rule.py",
        "rule_name": "Ensure Athena database is encrypted at rest",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/athena/latest/ug/creating-tables-based-on-encrypted-datasets-in-s3.html> in order to encrypt the Athena database.",
        "policy_id": null,
        "rule_id": "non_car_athena_database_encrypted_at_rest",
        "severity": "medium"
    },
    {
        "resource_types": [
            "compute"
        ],
        "is_custom": false,
        "security_layer": "iam",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Broad permissions in a Lambda function are dangerous and also are potentially expensive as anyone can invoke the function. Best practices suggest use the approach of least privilege. Generally, the correct approach is not to use public Lambda functions but to put them behind an API Gateway.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "3367b9f7-8dae-4846-a6ee-90b9f37b2601",
        "rule_logic": "Cloudrail will review all Lambda functions, both those defined in the AWS account, and those included in a Terraform plan, to determine if any of the permissions they grant include a \u201c*\u201d or similar principal who can InvokeFunction.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "In resource aws_lambda_permission avoid using wildcards in the principal.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/ensure_lambda_function_cannot_be_invoked_public_rule.py",
        "rule_name": "Ensure Lambda functions cannot be invoked by anonymous or all AWS authenticated users",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "1.2",
                    "1.3",
                    "7.2"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the steps in <https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-serviceinvoke> Avoid using wildcards in the principal.",
        "policy_id": null,
        "rule_id": "non_car_lambda_public_exposure",
        "severity": "medium"
    },
    {
        "resource_types": [
            "storage"
        ],
        "is_custom": false,
        "security_layer": "encryption",
        "cloud_provider": "amazon_web_services",
        "rule_type": "non_context_aware",
        "rule_description": "Cloudrail will review the FSx Windows File Systems being created in your environment. If a file system is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will highlight it as a violation.",
        "issue_items": [],
        "iac_type": "terraform",
        "created_at": "2021-11-04 14:04:13Z",
        "id": "773e6b60-a290-41a1-bce8-9434784dd09c",
        "rule_logic": "Cloudrail will identify all FSx Windows File Systems in the Terraform plan that are going to be created and are not configured to be encrypted at rest using a customer-managed CMK.",
        "assessment_id": "9fc52b2a-e5c2-49de-8c2b-3a7ad783df88",
        "account_config_id": null,
        "iac_remediation_steps": "For the aws_fsx_windows_file_system resource, set kms_key_id argument to use a customer-managed CMK ARN.",
        "source_control_link": "https://github.com/indeni/cloudrail-knowledge/blob/main/cloudrail/knowledge/rules/aws/non_context_aware/encryption_enforcement_rules/encrypt_at_rest/fsx_windows_file_system_encrypted_at_rest_with_customer_managed_cmk_rule.py",
        "rule_name": "Ensure FSx Windows File Systems being created are set to be encrypted at rest using customer-managed CMK",
        "compliance": {
            "PCI DSS": {
                "3.2.1": [
                    "3.4"
                ]
            }
        },
        "status": "skipped",
        "enforcement_mode": "advise",
        "console_remediation_steps": "Follow the guide at <https://docs.aws.amazon.com/fsx/latest/WindowsGuide/getting-started-step1.html> to enable file system encryption using a customer-managed CMK.",
        "policy_id": null,
        "rule_id": "non_car_fsx_windows_file_system_encrypted_at_rest_with_customer_managed_cmk",
        "severity": "low"
    }
]